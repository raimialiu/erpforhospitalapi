// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using medicloud.emr.api.Data;

namespace medicloud.emr.api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201201123624_checkind")]
    partial class checkind
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("medicloud.emr.api.Entities.AccessControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Modules")
                        .HasColumnName("modules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .HasColumnName("roles")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("access_control");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AccesscontrolUser", b =>
                {
                    b.Property<int>("AccessControlId")
                        .HasColumnName("access_controlID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("userID")
                        .HasColumnType("int");

                    b.HasKey("AccessControlId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("accesscontrol_user");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AccountCategory", b =>
                {
                    b.Property<int>("Accountcatid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("accountcatid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accountcattype")
                        .HasColumnName("accountcattype")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.HasKey("Accountcatid");

                    b.ToTable("AccountCategory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AccountManager", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProviderID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccountID")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AdminEmail")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Countryid")
                        .HasColumnName("countryid")
                        .HasColumnType("int");

                    b.Property<string>("HospitalAddress")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("HospitalName")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("LogDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone1")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Stateid")
                        .HasColumnName("stateid")
                        .HasColumnType("int");

                    b.HasKey("ProviderId");

                    b.HasIndex("Countryid");

                    b.HasIndex("Stateid");

                    b.ToTable("AccountManager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AccountType", b =>
                {
                    b.Property<int>("Accttypeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("accttypeid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accttypedesc")
                        .HasColumnName("accttypedesc")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Accttypeid");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Admission", b =>
                {
                    b.Property<int>("AdmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("admissionID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Admissiontime")
                        .HasColumnName("admissiontime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Bedid")
                        .HasColumnName("bedid")
                        .HasColumnType("int");

                    b.Property<string>("ClinicalSummary")
                        .HasColumnName("clinicalSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complaints")
                        .HasColumnName("complaints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadmitted")
                        .HasColumnName("dateadmitted")
                        .HasColumnType("datetime");

                    b.Property<int?>("Deptid")
                        .HasColumnName("deptid")
                        .HasColumnType("int");

                    b.Property<int?>("DischargedBy")
                        .HasColumnName("dischargedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dischargedate")
                        .HasColumnName("dischargedate")
                        .HasColumnType("datetime");

                    b.Property<string>("Dischargetime")
                        .HasColumnName("dischargetime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Estimateddischarge")
                        .HasColumnName("estimateddischarge")
                        .HasColumnType("datetime");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid")
                        .HasColumnType("int");

                    b.HasKey("AdmissionId");

                    b.HasIndex("Bedid");

                    b.HasIndex("Deptid");

                    b.HasIndex("DischargedBy");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Staffid");

                    b.ToTable("Admission");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AdmissionDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Admissionid")
                        .HasColumnName("admissionid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Diagnosiscode")
                        .HasColumnName("diagnosiscode")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Admissionid");

                    b.ToTable("Admission_Diagnosis");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AntenatalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Categoryid")
                        .HasColumnName("categoryid")
                        .HasColumnType("int");

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("dateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasColumnName("details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Record")
                        .HasColumnName("record")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Consultationid");

                    b.ToTable("Antenatal_Record");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("User")
                        .HasColumnName("user")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("app_setting");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AppUser", b =>
                {
                    b.Property<int>("Userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("userid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("IdentificationModeid")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Secretanswer")
                        .HasColumnName("secretanswer")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Secretquestion")
                        .HasColumnName("secretquestion")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("Titleid")
                        .HasColumnName("titleid")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Userid");

                    b.HasIndex("IdentificationModeid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Titleid");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Appuserid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("appuserid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Image")
                        .HasColumnName("image")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Middlename")
                        .HasColumnName("middlename")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Passwordhash")
                        .IsRequired()
                        .HasColumnName("passwordhash")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnName("phone1")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone2")
                        .HasColumnName("phone2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Appuserid")
                        .HasName("PK__Applicat__CF5F694F2AAD88F5");

                    b.HasIndex("Locationid");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Appointment", b =>
                {
                    b.Property<int>("Appointmentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("appointmentid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Appointmentdate")
                        .HasColumnName("appointmentdate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Appointmentenddate")
                        .HasColumnName("appointmentenddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Appointmenttime")
                        .HasColumnName("appointmenttime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Deptid")
                        .HasColumnName("deptid")
                        .HasColumnType("int");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Reasonforvisit")
                        .HasColumnName("reasonforvisit")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Appointmentid");

                    b.HasIndex("Deptid");

                    b.HasIndex("Staffid");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AppointmentSchedule", b =>
                {
                    b.Property<int>("Apptid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("apptid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adjuster")
                        .IsRequired()
                        .HasColumnName("adjuster")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Endtime")
                        .HasColumnName("endtime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Isrecurring")
                        .HasColumnName("isrecurring")
                        .HasColumnType("bit");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("PatientNumber")
                        .HasColumnName("patientNumber")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Provid")
                        .HasColumnName("provid")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnName("reason")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Recurrencerule")
                        .HasColumnName("recurrencerule")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Referralid")
                        .HasColumnName("referralid")
                        .HasColumnType("int");

                    b.Property<int?>("Referringid")
                        .HasColumnName("referringid")
                        .HasColumnType("int");

                    b.Property<int?>("Reminderid")
                        .HasColumnName("reminderid")
                        .HasColumnType("int");

                    b.Property<int?>("Specid")
                        .HasColumnName("specid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Starttime")
                        .HasColumnName("starttime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Statusid")
                        .HasColumnName("statusid")
                        .HasColumnType("int");

                    b.Property<int?>("Visittypeid")
                        .HasColumnName("visittypeid")
                        .HasColumnType("int");

                    b.HasKey("Apptid")
                        .HasName("PK__Appointm__6670983A2FEC3E03");

                    b.HasIndex("Locationid");

                    b.HasIndex("PatientNumber");

                    b.HasIndex("Provid");

                    b.HasIndex("Referralid");

                    b.HasIndex("Referringid");

                    b.HasIndex("Reminderid");

                    b.HasIndex("Specid");

                    b.HasIndex("Statusid");

                    b.HasIndex("Visittypeid");

                    b.ToTable("AppointmentSchedule");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AppointmentStatus", b =>
                {
                    b.Property<int>("Statusid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("statusid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Statuscolor")
                        .IsRequired()
                        .HasColumnName("statuscolor")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Statusname")
                        .IsRequired()
                        .HasColumnName("statusname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Statusid")
                        .HasName("PK__Appointm__36247E305B0C5D02");

                    b.ToTable("AppointmentStatus");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasColumnName("details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Providerid")
                        .HasColumnName("providerid")
                        .HasColumnType("int");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("Rate")
                        .HasColumnName("rate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ReceiptNum")
                        .HasColumnName("receiptNum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Supplierid")
                        .HasColumnName("supplierid")
                        .HasColumnType("int");

                    b.Property<int?>("Typeid")
                        .HasColumnName("typeid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Locationid");

                    b.HasIndex("Providerid");

                    b.HasIndex("Supplierid");

                    b.HasIndex("Typeid");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Providerid")
                        .HasColumnName("providerid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Providerid");

                    b.ToTable("AssetType");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AssignedAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Approverid")
                        .HasColumnName("approverid")
                        .HasColumnType("int");

                    b.Property<int?>("Assetid")
                        .HasColumnName("assetid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnName("dateAssigned")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateReturned")
                        .HasColumnName("dateReturned")
                        .HasColumnType("datetime");

                    b.Property<int?>("Providerid")
                        .HasColumnName("providerid")
                        .HasColumnType("int");

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Approverid");

                    b.HasIndex("Assetid");

                    b.HasIndex("Providerid");

                    b.HasIndex("Staffid");

                    b.ToTable("AssignedAsset");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AuditLog", b =>
                {
                    b.Property<int>("Auditlogid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("auditlogid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actionperformed")
                        .HasColumnName("actionperformed")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Formaccessed")
                        .HasColumnName("formaccessed")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Modulename")
                        .HasColumnName("modulename")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Systemid")
                        .HasColumnName("systemid")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("Userid")
                        .HasColumnName("userid")
                        .HasColumnType("int");

                    b.HasKey("Auditlogid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Userid");

                    b.ToTable("audit_log");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Authorisation", b =>
                {
                    b.Property<int>("Authorisationid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("authorisationid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Approvallist")
                        .HasColumnName("approvallist")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("Authorisationcode")
                        .HasColumnName("authorisationcode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<int?>("Hmoid")
                        .HasColumnName("hmoid")
                        .HasColumnType("int");

                    b.Property<string>("Nameofapprover")
                        .HasColumnName("nameofapprover")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Procedurecodes")
                        .HasColumnName("procedurecodes")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("Treatmentoption")
                        .HasColumnName("treatmentoption")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Authorisationid");

                    b.HasIndex("Hmoid");

                    b.ToTable("Authorisation");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Bed", b =>
                {
                    b.Property<int>("Bedid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bedid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bedname")
                        .HasColumnName("bedname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Bednumber")
                        .HasColumnName("bednumber")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Wardid")
                        .HasColumnName("wardid")
                        .HasColumnType("int");

                    b.HasKey("Bedid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Wardid");

                    b.ToTable("Bed");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.BenefitPackage", b =>
                {
                    b.Property<int>("Benpackageid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("benpackageid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Packagedesc")
                        .HasColumnName("packagedesc")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Packagename")
                        .HasColumnName("packagename")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("Benpackageid")
                        .HasName("pk_benefit_package");

                    b.ToTable("BenefitPackage");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Bill", b =>
                {
                    b.Property<int>("Billid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("billid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accounttypeid")
                        .HasColumnName("accounttypeid")
                        .HasColumnType("int");

                    b.Property<string>("Batchno")
                        .HasColumnName("batchno")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Billclosedate")
                        .HasColumnName("billclosedate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Billdate")
                        .HasColumnName("billdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<double?>("Consultationfee")
                        .HasColumnName("consultationfee")
                        .HasColumnType("float");

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<bool?>("IsHmopayment")
                        .HasColumnName("isHMOPayment")
                        .HasColumnType("bit");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Paymentconfirmed")
                        .HasColumnName("paymentconfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid")
                        .HasColumnType("int");

                    b.Property<int?>("Tariffid")
                        .HasColumnName("tariffid")
                        .HasColumnType("int");

                    b.HasKey("Billid");

                    b.HasIndex("Accounttypeid");

                    b.HasIndex("Consultationid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Staffid");

                    b.HasIndex("Tariffid");

                    b.ToTable("Bill");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.BillDetail", b =>
                {
                    b.Property<int>("Billdetailid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("billdetailid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Amount")
                        .HasColumnName("amount")
                        .HasColumnType("float");

                    b.Property<int?>("Billid")
                        .HasColumnName("billid")
                        .HasColumnType("int");

                    b.Property<string>("Billtype")
                        .HasColumnName("billtype")
                        .HasColumnType("char(1)")
                        .IsFixedLength(true)
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateofservice")
                        .HasColumnName("dateofservice")
                        .HasColumnType("datetime");

                    b.Property<int?>("Deptid")
                        .HasColumnName("deptid")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Servicedesc")
                        .HasColumnName("servicedesc")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("Serviceid")
                        .HasColumnName("serviceid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Servicetype")
                        .HasColumnName("servicetype")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Billdetailid");

                    b.HasIndex("Deptid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Bill_Detail");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.BillPayable", b =>
                {
                    b.Property<int>("Billpayableid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("billpayableid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amountinwords")
                        .HasColumnName("amountinwords")
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<double?>("Amountpaid")
                        .HasColumnName("amountpaid")
                        .HasColumnType("float");

                    b.Property<double?>("Balance")
                        .HasColumnName("balance")
                        .HasColumnType("float");

                    b.Property<double?>("Billamount")
                        .HasColumnName("billamount")
                        .HasColumnType("float");

                    b.Property<int?>("Billid")
                        .HasColumnName("billid")
                        .HasColumnType("int");

                    b.Property<double?>("Discount")
                        .HasColumnName("discount")
                        .HasColumnType("float");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid")
                        .HasColumnType("int");

                    b.Property<string>("Trfno")
                        .HasColumnName("trfno")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Txndate")
                        .HasColumnName("txndate")
                        .HasColumnType("datetime");

                    b.HasKey("Billpayableid");

                    b.HasIndex("Billid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Staffid");

                    b.ToTable("BillPayable");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Biometric", b =>
                {
                    b.Property<int>("Biometricid")
                        .HasColumnName("biometricid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Fingerindex")
                        .HasColumnName("fingerindex")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Fingername")
                        .HasColumnName("fingername")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Fingertemplate")
                        .HasColumnName("fingertemplate")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Quality")
                        .HasColumnName("quality")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Wsqformat")
                        .HasColumnName("wsqformat")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("Biometricid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Biometric");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.BirthRegister", b =>
                {
                    b.Property<int>("Babyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("babyid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Babycount")
                        .HasColumnName("babycount")
                        .HasColumnType("int");

                    b.Property<string>("Birthweight")
                        .HasColumnName("birthweight")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Deliverydate")
                        .HasColumnName("deliverydate")
                        .HasColumnType("datetime");

                    b.Property<string>("Deliverytype")
                        .HasColumnName("deliverytype")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Familyname")
                        .HasColumnName("familyname")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid")
                        .HasColumnType("int");

                    b.HasKey("Babyid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Staffid");

                    b.ToTable("BirthRegister");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.BloodGroup", b =>
                {
                    b.Property<int>("Bloodgroupid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bloodgroupid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bloodgroupname")
                        .HasColumnName("bloodgroupname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Bloodgroupid");

                    b.ToTable("BloodGroup");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.BreakBlockSchedule", b =>
                {
                    b.Property<int>("Blockid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("blockid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adjuster")
                        .IsRequired()
                        .HasColumnName("adjuster")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Blockname")
                        .IsRequired()
                        .HasColumnName("blockname")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Days")
                        .IsRequired()
                        .HasColumnName("days")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Endtime")
                        .IsRequired()
                        .HasColumnName("endtime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Iscurrent")
                        .HasColumnName("iscurrent")
                        .HasColumnType("bit");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<int?>("Provid")
                        .HasColumnName("provid")
                        .HasColumnType("int");

                    b.Property<string>("Starttime")
                        .IsRequired()
                        .HasColumnName("starttime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Blockid")
                        .HasName("PK__BreakBlo__17B570224D59AC15");

                    b.HasIndex("Locationid");

                    b.HasIndex("Provid");

                    b.ToTable("BreakBlockSchedule");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.CaseNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cardiovascular")
                        .HasColumnType("text");

                    b.Property<string>("CentralNervousSystem")
                        .HasColumnType("text");

                    b.Property<string>("Complaints")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FamilyAndSocialHistory")
                        .HasColumnType("text");

                    b.Property<string>("GastroIntestinal")
                        .HasColumnType("text");

                    b.Property<string>("General")
                        .HasColumnType("text");

                    b.Property<string>("HistoryOfPresentingComplaints")
                        .HasColumnType("text");

                    b.Property<string>("MusculoSkeletal")
                        .HasColumnType("text");

                    b.Property<string>("PastMedicalAndDrugHistory")
                        .HasColumnType("text");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Reproductive")
                        .HasColumnType("text");

                    b.Property<string>("Respiratory")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnName("userID")
                        .HasColumnType("int");

                    b.Property<int?>("UtilizationId")
                        .HasColumnName("utilizationID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UserId");

                    b.HasIndex("UtilizationId");

                    b.ToTable("case_note");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.CentralStore", b =>
                {
                    b.Property<int>("Centralstoreid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("centralstoreid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Costprice")
                        .HasColumnName("costprice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Drugcode")
                        .HasColumnName("drugcode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Drugid")
                        .HasColumnName("drugid")
                        .HasColumnType("int");

                    b.Property<int?>("Extqty")
                        .HasColumnName("extqty")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Manufacturedate")
                        .HasColumnName("manufacturedate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Packetno")
                        .HasColumnName("packetno")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Reorderlevel")
                        .HasColumnName("reorderlevel")
                        .HasColumnType("int");

                    b.Property<string>("Unitofstorage")
                        .HasColumnName("unitofstorage")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Units")
                        .HasColumnName("units")
                        .HasColumnType("int");

                    b.HasKey("Centralstoreid");

                    b.HasIndex("ProviderId");

                    b.ToTable("CentralStore");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.CheckIn", b =>
                {
                    b.Property<int>("Encounterid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("encounterId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Accountid")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnName("checkindate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CheckOutDate")
                        .HasColumnName("checkoutdate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCheckedIn")
                        .HasColumnName("ischeckedin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnName("ischeckedout")
                        .HasColumnType("bit");

                    b.Property<int>("Locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Encounterid")
                        .HasName("PK__Checke__3A71E2D82A4295FC");

                    b.HasIndex("Accountid");

                    b.HasIndex("Locationid");

                    b.HasIndex("Patientid");

                    b.ToTable("CheckIn");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Claims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amountbilled")
                        .HasColumnName("amountbilled")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Claimtype")
                        .HasColumnName("claimtype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DiagnosisId")
                        .HasColumnName("diagnosisID")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosiscode")
                        .HasColumnName("diagnosiscode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Enrolleeid")
                        .HasColumnName("enrolleeid")
                        .HasColumnType("int");

                    b.Property<string>("Flag")
                        .HasColumnName("flag")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Hmonumber")
                        .HasColumnName("hmonumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsClaimExported")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isClaimExported")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Issynced")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("issynced")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Panumber")
                        .HasColumnName("PANumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patienttype")
                        .HasColumnName("patienttype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SyncedAt")
                        .HasColumnName("synced_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Syncid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("syncid")
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("((0))")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("Treatmentenddate")
                        .HasColumnName("treatmentenddate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Treatmentstartdate")
                        .HasColumnName("treatmentstartdate")
                        .HasColumnType("date");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("Enrolleeid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Userid");

                    b.ToTable("claims");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Clinic", b =>
                {
                    b.Property<int>("Clinicid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("clinicid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Clinicname")
                        .HasColumnName("clinicname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contactperson")
                        .HasColumnName("contactperson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contactphone")
                        .HasColumnName("contactphone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.HasKey("Clinicid");

                    b.ToTable("Clinic");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Consultation", b =>
                {
                    b.Property<int>("Consultationid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("consultationid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Advice")
                        .HasColumnName("advice")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Arrivaltime")
                        .HasColumnName("arrivaltime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Assessment")
                        .HasColumnName("assessment")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Casenotes")
                        .HasColumnName("casenotes")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Chronicdisease")
                        .HasColumnName("chronicdisease")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Complainthistory")
                        .HasColumnName("complainthistory")
                        .HasColumnType("text");

                    b.Property<string>("Complaints")
                        .HasColumnName("complaints")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("Consultationdate")
                        .HasColumnName("consultationdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Departuretime")
                        .HasColumnName("departuretime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Deptid")
                        .HasColumnName("deptid")
                        .HasColumnType("int");

                    b.Property<string>("Docname")
                        .HasColumnName("docname")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Docpath")
                        .HasColumnName("docpath")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Endtime")
                        .HasColumnName("endtime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Findings")
                        .HasColumnName("findings")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("Hmoid")
                        .HasColumnName("hmoid")
                        .HasColumnType("int");

                    b.Property<bool?>("Isbillgenerated")
                        .HasColumnName("isbillgenerated")
                        .HasColumnType("bit");

                    b.Property<bool?>("Isdocattached")
                        .HasColumnName("isdocattached")
                        .HasColumnType("bit");

                    b.Property<string>("Notenote")
                        .HasColumnName("notenote")
                        .HasColumnType("text");

                    b.Property<string>("Objective")
                        .HasColumnName("objective")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Patienttype")
                        .HasColumnName("patienttype")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Plan")
                        .HasColumnName("plan")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Proceduredone")
                        .HasColumnName("proceduredone")
                        .HasColumnType("text");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Staffid")
                        .HasColumnName("staffid")
                        .HasColumnType("int");

                    b.Property<string>("Starttime")
                        .HasColumnName("starttime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Subjective")
                        .HasColumnName("subjective")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("Consultationid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Consultation");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationCheck", b =>
                {
                    b.Property<int>("Txnkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("txnkey")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Checkid")
                        .HasColumnName("checkid")
                        .HasColumnType("int");

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasColumnName("details")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Txnkey")
                        .HasName("PK_Consultation_Check_1");

                    b.HasIndex("Consultationid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Consultation_Check");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationChecks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ccname")
                        .HasColumnName("CCname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("FilterCategory")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("ConsultationChecks");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationCheckslist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cclname")
                        .HasColumnName("CCLname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Ccltypeid")
                        .HasColumnName("CCLtypeid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Ccltypeid");

                    b.ToTable("ConsultationCheckslist");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationComplaints", b =>
                {
                    b.Property<int>("Txnkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("txnkey")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Complaints")
                        .HasColumnName("complaints")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.HasKey("Txnkey");

                    b.HasIndex("Consultationid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Consultation_Complaints");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationDental", b =>
                {
                    b.Property<int>("Txnkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("txnkey")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<string>("Ct")
                        .HasColumnName("ct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Displacement")
                        .HasColumnName("displacement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dt")
                        .HasColumnName("dt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extraoralexamfa")
                        .HasColumnName("extraoralexamfa")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Extraoralexamlav")
                        .HasColumnName("extraoralexamlav")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Extraoralexamswe")
                        .HasColumnName("extraoralexamswe")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Extraoralexamtmj")
                        .HasColumnName("extraoralexamtmj")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Ft")
                        .HasColumnName("ft")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Intraoralexamgingivae")
                        .HasColumnName("intraoralexamgingivae")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Intraoralexamoralhyj")
                        .HasColumnName("intraoralexamoralhyj")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Intraoralexamtris")
                        .HasColumnName("intraoralexamtris")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Tp")
                        .HasColumnName("tp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatmentdone")
                        .HasColumnName("treatmentdone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Treatmentplan")
                        .HasColumnName("treatmentplan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ttp")
                        .HasColumnName("ttp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Txnkey");

                    b.HasIndex("Consultationid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Consultation_Dental");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationDentalProcedure", b =>
                {
                    b.Property<int>("Txnkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("txnkey")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Toothno")
                        .HasColumnName("toothno")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Treatmentplan")
                        .HasColumnName("treatmentplan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Txnkey");

                    b.HasIndex("Consultationid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Consultation_DentalProcedure");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationDiagnosis", b =>
                {
                    b.Property<int>("Txnkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("txnkey")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Diagnosiscode")
                        .HasColumnName("diagnosiscode")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Txnkey");

                    b.HasIndex("Consultationid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Consultation_Diagnosis");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationImpression", b =>
                {
                    b.Property<int>("Txnkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("txnkey")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Impressioncode")
                        .HasColumnName("impressioncode")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.HasKey("Txnkey");

                    b.ToTable("Consultation_Impression");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationLaboratory", b =>
                {
                    b.Property<int>("Labkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("labkey")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Arrivaltime")
                        .HasColumnName("arrivaltime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<string>("Departuretime")
                        .HasColumnName("departuretime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Deptid")
                        .HasColumnName("deptid")
                        .HasColumnType("int");

                    b.Property<string>("Docname")
                        .HasColumnName("docname")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Docpath")
                        .HasColumnName("docpath")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Endtime")
                        .HasColumnName("endtime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Isdocattached")
                        .HasColumnName("isdocattached")
                        .HasColumnType("bit");

                    b.Property<bool?>("Isexternal")
                        .HasColumnName("isexternal")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Labdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("labdate")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Labnotes")
                        .HasColumnName("labnotes")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Patientorderid")
                        .HasColumnName("patientorderid")
                        .HasColumnType("int");

                    b.Property<string>("Patienttype")
                        .HasColumnName("patienttype")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Starttime")
                        .HasColumnName("starttime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Labkey");

                    b.HasIndex("Deptid");

                    b.HasIndex("Patientid");

                    b.HasIndex("Patientorderid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Consultation_Laboratory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationOtherDiagnosis", b =>
                {
                    b.Property<int>("Txnkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("txnkey")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Otherdiagnosis")
                        .HasColumnName("otherdiagnosis")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Txnkey");

                    b.HasIndex("Consultationid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Consultation_OtherDiagnosis");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationPrescription", b =>
                {
                    b.Property<int>("Txnkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("txnkey")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dispensedate")
                        .HasColumnName("dispensedate")
                        .HasColumnType("datetime");

                    b.Property<string>("Dispensenotes")
                        .HasColumnName("dispensenotes")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("Docname")
                        .HasColumnName("docname")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Docpath")
                        .HasColumnName("docpath")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Dosage")
                        .HasColumnName("dosage")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Drugcode")
                        .HasColumnName("drugcode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Drugstrength")
                        .HasColumnName("drugstrength")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Drugtype")
                        .HasColumnName("drugtype")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("int");

                    b.Property<string>("Frequency")
                        .HasColumnName("frequency")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Injectionflow")
                        .HasColumnName("injectionflow")
                        .HasColumnType("int");

                    b.Property<bool?>("Isdispensed")
                        .HasColumnName("isdispensed")
                        .HasColumnType("bit");

                    b.Property<bool?>("Isdocattached")
                        .HasColumnName("isdocattached")
                        .HasColumnType("bit");

                    b.Property<bool?>("Isundispensed")
                        .HasColumnName("isundispensed")
                        .HasColumnType("bit");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Prescriptionnotes")
                        .HasColumnName("prescriptionnotes")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Units")
                        .HasColumnName("units")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Txnkey");

                    b.HasIndex("Consultationid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Consultation_Prescription");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationProblem", b =>
                {
                    b.Property<int>("Txnkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("txnkey")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Problem")
                        .HasColumnName("problem")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.HasKey("Txnkey");

                    b.HasIndex("Consultationid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Consultation_Problem");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationProcedure", b =>
                {
                    b.Property<int>("Txnkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("txnkey")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Panumber")
                        .HasColumnName("panumber")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Procedurecode")
                        .HasColumnName("procedurecode")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.HasKey("Txnkey");

                    b.HasIndex("Consultationid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Consultation_Procedure");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationRadiology", b =>
                {
                    b.Property<int>("Labkey")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("labkey")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Arrivaltime")
                        .HasColumnName("arrivaltime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<string>("Departuretime")
                        .HasColumnName("departuretime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Deptid")
                        .HasColumnName("deptid")
                        .HasColumnType("int");

                    b.Property<string>("Docname")
                        .HasColumnName("docname")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Docpath")
                        .HasColumnName("docpath")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Endtime")
                        .HasColumnName("endtime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Isdocattached")
                        .HasColumnName("isdocattached")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Labdate")
                        .HasColumnName("labdate")
                        .HasColumnType("datetime");

                    b.Property<string>("Labnotes")
                        .HasColumnName("labnotes")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Labserviceid")
                        .HasColumnName("labserviceid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Patienttype")
                        .HasColumnName("patienttype")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Starttime")
                        .HasColumnName("starttime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Labkey");

                    b.HasIndex("ProviderId");

                    b.ToTable("Consultation_Radiology");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationUtilization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConsultationId")
                        .HasColumnName("consultationID")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DiagnosisId")
                        .HasColumnName("diagnosisID")
                        .HasColumnType("int");

                    b.Property<bool?>("Isclaimsgenerated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isclaimsgenerated")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("ProviderId");

                    b.ToTable("consultation_utilization");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Country", b =>
                {
                    b.Property<int>("Countryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("countryid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Countryname")
                        .HasColumnName("countryname")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Countryid");

                    b.ToTable("country");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Cptcategory", b =>
                {
                    b.Property<int>("Cptcategoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cptcategoryid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("Cptcategorydesc")
                        .HasColumnName("cptcategorydesc")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("Cptcategoryname")
                        .HasColumnName("cptcategoryname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Cptcategoryid");

                    b.ToTable("CPTCategory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Cptprocedure", b =>
                {
                    b.Property<int>("Serial")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("serial")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Cptcategoryid")
                        .HasColumnName("cptcategoryid")
                        .HasColumnType("int");

                    b.Property<string>("Cptcode")
                        .HasColumnName("CPTCode")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Cptdescription")
                        .HasColumnName("CPTDescription")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("Cptsubcategoryid")
                        .HasColumnName("cptsubcategoryid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Serial");

                    b.HasIndex("Cptcategoryid");

                    b.HasIndex("Cptsubcategoryid");

                    b.ToTable("CPTProcedure");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.CptsubCategory", b =>
                {
                    b.Property<int>("Cptsubcategoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cptsubcategoryid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cptcategorydesc")
                        .HasColumnName("cptcategorydesc")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<int?>("Cptcategoryid")
                        .HasColumnName("cptcategoryid")
                        .HasColumnType("int");

                    b.Property<string>("Cptsubcategoryname")
                        .HasColumnName("cptsubcategoryname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Cptsubcategoryid");

                    b.HasIndex("Cptcategoryid");

                    b.ToTable("CPTSubCategory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DataSynchronization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.ToTable("data_synchronization");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DentalProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnName("price")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Dental_Procedure");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Department", b =>
                {
                    b.Property<int>("Deptid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("deptid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Deptname")
                        .HasColumnName("deptname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.HasKey("Deptid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DependantInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Enrolleeid")
                        .HasColumnName("enrolleeid")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnName("position")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Relationship")
                        .HasColumnName("relationship")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Enrolleeid");

                    b.ToTable("dependant_info");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Designation", b =>
                {
                    b.Property<int>("Desigid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("desigid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Designation1")
                        .HasColumnName("designation")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Desigid");

                    b.ToTable("Designation");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Genderconstraint")
                        .HasColumnName("genderconstraint")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("diagnosis");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DiagnosisUtilization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DiagnosisId")
                        .HasColumnName("diagnosisID")
                        .HasColumnType("int");

                    b.Property<int?>("Diagsequence")
                        .HasColumnName("diagsequence")
                        .HasColumnType("int");

                    b.Property<int>("UtilizationId")
                        .HasColumnName("utilizationID")
                        .HasColumnType("int");

                    b.Property<string>("VisiType")
                        .HasColumnName("visiType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("UtilizationId");

                    b.ToTable("diagnosis_utilization");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DispensingStore", b =>
                {
                    b.Property<int>("Dispensingstoreid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dispensingstoreid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Drugid")
                        .HasColumnName("drugid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Expirydate")
                        .HasColumnName("expirydate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Manufacturedate")
                        .HasColumnName("manufacturedate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.Property<int?>("ReorderLevel")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Stockdate")
                        .HasColumnType("datetime");

                    b.HasKey("Dispensingstoreid");

                    b.HasIndex("Drugid");

                    b.HasIndex("ProviderId");

                    b.ToTable("DispensingStore");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Groupid")
                        .HasColumnName("groupid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shortname")
                        .HasColumnName("shortname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Groupid");

                    b.ToTable("division");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adverseeffect")
                        .HasColumnName("adverseeffect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brandname")
                        .HasColumnName("brandname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contrindications")
                        .HasColumnName("contrindications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dispensingrate")
                        .HasColumnName("dispensingrate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dosage")
                        .HasColumnName("dosage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Drugcategoryid")
                        .HasColumnName("drugcategoryid")
                        .HasColumnType("int");

                    b.Property<string>("Drugcode")
                        .HasColumnName("drugcode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Drugtype")
                        .HasColumnName("drugtype")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Expirydate")
                        .HasColumnName("expirydate")
                        .HasColumnType("datetime");

                    b.Property<string>("Indication")
                        .HasColumnName("indication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LastNotificationId")
                        .HasColumnName("lastNotificationID")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasColumnName("manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Productiondate")
                        .HasColumnName("productiondate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Providerid")
                        .HasColumnName("providerid")
                        .HasColumnType("int");

                    b.Property<int?>("ReorderQuantity")
                        .HasColumnName("reorder_quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Stock")
                        .HasColumnName("stock")
                        .HasColumnType("int");

                    b.Property<int?>("Supplierid")
                        .HasColumnName("supplierid")
                        .HasColumnType("int");

                    b.Property<string>("Unitofstorage")
                        .HasColumnName("unitofstorage")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Unitprice")
                        .HasColumnName("unitprice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UploadedAt")
                        .HasColumnName("uploaded_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Drugcategoryid");

                    b.HasIndex("Providerid");

                    b.HasIndex("Supplierid");

                    b.ToTable("Drug");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DrugCategory", b =>
                {
                    b.Property<int>("Drugcategoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("drugcategoryid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Categorydesc")
                        .HasColumnName("categorydesc")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Drugcategory1")
                        .HasColumnName("drugcategory")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Drugcategoryid");

                    b.ToTable("DrugCategory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DrugDispense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnName("unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnName("userID")
                        .HasColumnType("int");

                    b.Property<int?>("UtilizationId")
                        .HasColumnName("utilizationID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UtilizationId");

                    b.ToTable("drug_dispense");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DrugOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdminHandler")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AdminTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("int");

                    b.Property<int?>("DrugId")
                        .HasColumnName("drugID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAdminApproved")
                        .HasColumnName("isAdminApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAdminHandled")
                        .HasColumnName("isAdminHandled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPharmacyConcluded")
                        .HasColumnName("isPharmacyConcluded")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPharmayHandled")
                        .HasColumnName("isPharmayHandled")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderSupplierId")
                        .HasColumnName("OrderSupplierID")
                        .HasColumnType("int");

                    b.Property<int?>("PharmacyHandler")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PharmacyTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RequisitionNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AdminHandler");

                    b.HasIndex("DrugId");

                    b.HasIndex("OrderSupplierId");

                    b.HasIndex("PharmacyHandler");

                    b.ToTable("DrugOrders");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DrugPricelist", b =>
                {
                    b.Property<DateTime>("Datetadded")
                        .HasColumnName("datetadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Drugname")
                        .IsRequired()
                        .HasColumnName("drugname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hmoid")
                        .HasColumnName("hmoid")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<string>("Price")
                        .HasColumnName("price")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.ToTable("DrugPricelist");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DrugTherapeuticClass", b =>
                {
                    b.Property<int>("Classid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("classid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Therapeuticdesc")
                        .HasColumnName("therapeuticdesc")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Classid");

                    b.ToTable("DrugTherapeuticClass");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DrugUtilization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Deseunit")
                        .HasColumnName("deseunit")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("DiagnosisId")
                        .HasColumnName("diagnosisID")
                        .HasColumnType("int");

                    b.Property<string>("Dose")
                        .HasColumnName("dose")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("DrugId")
                        .HasColumnName("DrugID")
                        .HasColumnType("int");

                    b.Property<string>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Frequency")
                        .HasColumnName("frequency")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<bool?>("Isclaimsgenerated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isclaimsgenerated")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Isdispensed")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isdispensed")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Paymenttype")
                        .HasColumnName("paymenttype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.ToTable("drug_utilization");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Enrollee", b =>
                {
                    b.Property<int>("IdE")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_e")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addressline1E")
                        .HasColumnName("addressline1_e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Addressline2E")
                        .HasColumnName("addressline2_e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cardnumber")
                        .HasColumnName("cardnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Coverageenddate")
                        .HasColumnName("coverageenddate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Coveragestartdate")
                        .HasColumnName("coveragestartdate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dateenrolleed")
                        .HasColumnName("dateenrolleed")
                        .HasColumnType("date");

                    b.Property<int?>("Divisionid")
                        .HasColumnName("divisionid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DobE")
                        .HasColumnName("dob_e")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Effectivedate")
                        .HasColumnName("effectivedate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Enrolleetypeid")
                        .HasColumnName("enrolleetypeid")
                        .HasColumnType("int");

                    b.Property<string>("FirstnameE")
                        .HasColumnName("firstname_e")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Flag")
                        .HasColumnName("flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Formprocesseddate")
                        .HasColumnName("formprocesseddate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Formreceiveddate")
                        .HasColumnName("formreceiveddate")
                        .HasColumnType("date");

                    b.Property<string>("GenderE")
                        .HasColumnName("gender_e")
                        .HasColumnType("char(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("Groupid")
                        .HasColumnName("groupid")
                        .HasColumnType("int");

                    b.Property<string>("Hmocode1")
                        .HasColumnName("hmocode1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hmocode2")
                        .HasColumnName("hmocode2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hmocode3")
                        .HasColumnName("hmocode3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Issynced")
                        .HasColumnName("issynced")
                        .HasColumnType("bit");

                    b.Property<string>("LastnameE")
                        .HasColumnName("lastname_e")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Maritalstatus")
                        .HasColumnName("maritalstatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Market")
                        .HasColumnName("market")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Networkid")
                        .HasColumnName("networkid")
                        .HasColumnType("int");

                    b.Property<string>("Nextofkin")
                        .HasColumnName("nextofkin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nextofkinaddress")
                        .HasColumnName("nextofkinaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nextofkinphone")
                        .HasColumnName("nextofkinphone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnName("occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeLga")
                        .HasColumnName("officeLGA")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Officeaddress")
                        .HasColumnName("officeaddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Officecity")
                        .HasColumnName("officecity")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Officestate")
                        .HasColumnName("officestate")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("OthernameE")
                        .HasColumnName("othername_e")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("PhoneE")
                        .HasColumnName("phone_e")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Plainid")
                        .HasColumnName("plainid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Planeffectivedate")
                        .HasColumnName("planeffectivedate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Planterminationdate")
                        .HasColumnName("planterminationdate")
                        .HasColumnType("date");

                    b.Property<string>("PrincipalCode")
                        .HasColumnName("principalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderReason")
                        .HasColumnName("providerReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Providereffectivedate")
                        .HasColumnName("providereffectivedate")
                        .HasColumnType("date");

                    b.Property<int?>("Providerid")
                        .HasColumnName("providerid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Providerterminationdate")
                        .HasColumnName("providerterminationdate")
                        .HasColumnType("date");

                    b.Property<string>("Receiptnum")
                        .HasColumnName("receiptnum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SyncAt")
                        .HasColumnName("sync_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Syncid")
                        .HasColumnName("syncid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Terminationdate")
                        .HasColumnName("terminationdate")
                        .HasColumnType("date");

                    b.Property<string>("TitleE")
                        .HasColumnName("title_e")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("datetime");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid")
                        .HasColumnType("int");

                    b.Property<string>("Zip")
                        .HasColumnName("zip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdE");

                    b.HasIndex("Divisionid");

                    b.HasIndex("Enrolleetypeid");

                    b.HasIndex("Groupid");

                    b.HasIndex("Networkid");

                    b.HasIndex("Plainid");

                    b.HasIndex("Providerid");

                    b.HasIndex("Userid");

                    b.ToTable("enrollee");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.EnrolleeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("enrollee_type");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Fingerprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Fingername")
                        .HasColumnName("fingername")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<byte[]>("Image")
                        .HasColumnName("image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Index")
                        .HasColumnName("index")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<bool?>("Issynced")
                        .HasColumnName("issynced")
                        .HasColumnType("bit");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Quality")
                        .HasColumnName("quality")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SyncAt")
                        .HasColumnName("sync_at")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Wsqformat")
                        .HasColumnName("wsqformat")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Fingerprint");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Formdirect2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Textfield")
                        .HasColumnName("textfield")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Textfield2")
                        .HasColumnName("textfield2")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("formdirect2");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Gender", b =>
                {
                    b.Property<int>("Genderid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("genderid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Gendername")
                        .HasColumnName("gendername")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Genderid");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.GeneralExamination", b =>
                {
                    b.Property<int>("Examid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("examid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Examdescription")
                        .HasColumnName("examdescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Examid");

                    b.ToTable("General_Examination");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.GeneralSchedule", b =>
                {
                    b.Property<int>("Genschid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("genschid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adjuster")
                        .IsRequired()
                        .HasColumnName("adjuster")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Endtime")
                        .IsRequired()
                        .HasColumnName("endtime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Iscurrent")
                        .HasColumnName("iscurrent")
                        .HasColumnType("bit");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Starttime")
                        .IsRequired()
                        .HasColumnName("starttime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Timeinterval")
                        .HasColumnName("timeinterval")
                        .HasColumnType("int");

                    b.HasKey("Genschid")
                        .HasName("PK__GeneralS__370A00B8E685F8EB");

                    b.HasIndex("Locationid");

                    b.ToTable("GeneralSchedule");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.GenoType", b =>
                {
                    b.Property<int>("Genotypeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("genotypeid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Genotypename")
                        .HasColumnName("genotypename")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Genotypeid");

                    b.ToTable("GenoType");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Contractend")
                        .HasColumnName("contractend")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Contractstart")
                        .HasColumnName("contractstart")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Scheme")
                        .HasColumnName("scheme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shortname")
                        .HasColumnName("shortname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("group");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.HealthCareFacilitator", b =>
                {
                    b.Property<int>("Facilitatorid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("facilitatorid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Facilitatorname")
                        .HasColumnName("facilitatorname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Facilitatorid");

                    b.ToTable("HealthCareFacilitator");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Hmo", b =>
                {
                    b.Property<int>("Hmoid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("hmoid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Hmoaddress")
                        .HasColumnName("hmoaddress")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Hmocontact")
                        .HasColumnName("hmocontact")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Hmocountry")
                        .HasColumnName("hmocountry")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Hmoname")
                        .HasColumnName("hmoname")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Hmonumber")
                        .HasColumnName("hmonumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Hmophone1")
                        .HasColumnName("hmophone1")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Hmophone2")
                        .HasColumnName("hmophone2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Stateid")
                        .HasColumnName("stateid")
                        .HasColumnType("int");

                    b.Property<int?>("Typeid")
                        .HasColumnName("typeid")
                        .HasColumnType("int");

                    b.HasKey("Hmoid");

                    b.HasIndex("Stateid");

                    b.HasIndex("Typeid");

                    b.ToTable("HMO");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.HmoMonthlyList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Companyname")
                        .HasColumnName("companyname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("dob")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enddate")
                        .HasColumnName("enddate")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Hmoid")
                        .HasColumnName("hmoid")
                        .HasColumnType("int");

                    b.Property<string>("Hmoname")
                        .HasColumnName("hmoname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsResolved")
                        .HasColumnName("isResolved")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Month")
                        .HasColumnName("month")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Othernames")
                        .HasColumnName("othernames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientHmoNumber")
                        .HasColumnName("patientHmoNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plancode")
                        .HasColumnName("plancode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Planname")
                        .HasColumnName("planname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Servicetype")
                        .HasColumnName("servicetype")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Startdate")
                        .HasColumnName("startdate")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Uploaddate")
                        .HasColumnName("uploaddate")
                        .HasColumnType("datetime");

                    b.Property<string>("Year")
                        .HasColumnName("year")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Hmoid");

                    b.ToTable("hmoMonthlyList");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.HmoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnName("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Providerid")
                        .HasColumnName("providerid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Providerid");

                    b.ToTable("HmoType");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Hshhs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Textfield1")
                        .HasColumnName("textfield1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Textfield12")
                        .HasColumnName("textfield12")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("hshhs");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Icd10diagnosis", b =>
                {
                    b.Property<int>("Serial")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("serial")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosiscode")
                        .IsRequired()
                        .HasColumnName("diagnosiscode")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int?>("Icdcategoryid")
                        .HasColumnName("icdcategoryid")
                        .HasColumnType("int");

                    b.Property<string>("Longdescription")
                        .HasColumnName("longdescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Serial")
                        .HasName("PK_ICD10Diagnosis_1");

                    b.HasIndex("Icdcategoryid");

                    b.ToTable("ICD10Diagnosis");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Icdcategory", b =>
                {
                    b.Property<int>("Icdcategoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("icdcategoryid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Icdcategorydesc")
                        .HasColumnName("icdcategorydesc")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("Icdcategoryname")
                        .HasColumnName("icdcategoryname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Icdcategoryid");

                    b.ToTable("ICDCategory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.IdGeneration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .HasColumnName("active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Endvalue")
                        .HasColumnName("endvalue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastcode")
                        .HasColumnName("lastcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Startvalue")
                        .HasColumnName("startvalue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("id_generation");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.IdentificationMode", b =>
                {
                    b.Property<int>("IdentificationModeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdentificationModename")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdentificationModeid");

                    b.ToTable("IdentificationMode");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.InjectionTaken", b =>
                {
                    b.Property<int>("Injid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("injid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Administeredby")
                        .IsRequired()
                        .HasColumnName("administeredby")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datetaken")
                        .HasColumnName("datetaken")
                        .HasColumnType("datetime");

                    b.Property<string>("Injname")
                        .IsRequired()
                        .HasColumnName("injname")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .IsRequired()
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("QtyLeft")
                        .HasColumnName("qty_left")
                        .HasColumnType("int");

                    b.Property<int>("QtyTaken")
                        .HasColumnName("qty_taken")
                        .HasColumnType("int");

                    b.HasKey("Injid");

                    b.ToTable("Injection_Taken");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Insurance", b =>
                {
                    b.Property<int>("Insuranceid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("insuranceid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Effectivedate")
                        .HasColumnName("effectivedate")
                        .HasColumnType("date");

                    b.Property<string>("Employeraddress")
                        .HasColumnName("employeraddress")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Employercountry")
                        .HasColumnName("employercountry")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Employername")
                        .HasColumnName("employername")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("Hmoid")
                        .HasColumnName("hmoid")
                        .HasColumnType("int");

                    b.Property<string>("Hmonumber")
                        .HasColumnName("hmonumber")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Insurancetype")
                        .HasColumnName("insurancetype")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Planname")
                        .HasColumnName("planname")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Relationship")
                        .HasColumnName("relationship")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Stateid")
                        .HasColumnName("stateid")
                        .HasColumnType("int");

                    b.HasKey("Insuranceid");

                    b.HasIndex("Hmoid");

                    b.HasIndex("Patientid");

                    b.HasIndex("Stateid");

                    b.ToTable("Insurance");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.LeadSource", b =>
                {
                    b.Property<int>("Leadid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("leadid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Leadname")
                        .HasColumnName("leadname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Leadid");

                    b.ToTable("LeadSource");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.LicenseManager", b =>
                {
                    b.Property<Guid>("LicenseKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsFirstTimeLogin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LicenseEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LicenseStart")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LogDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("RecordLimit")
                        .HasColumnType("int");

                    b.HasKey("LicenseKey");

                    b.HasIndex("ProviderId");

                    b.ToTable("LicenseManager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Location", b =>
                {
                    b.Property<int>("Locationid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("locationid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Locationadmin")
                        .HasColumnName("locationadmin")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Locationdescription")
                        .HasColumnName("locationdescription")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Locationname")
                        .HasColumnName("locationname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone1")
                        .HasColumnName("phone1")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone2")
                        .HasColumnName("phone2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Zipcode")
                        .HasColumnName("zipcode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Locationid");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LoginID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("AccountId")
                        .HasColumnName("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsNewUser")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LogDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("LoginId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Maritalstatus", b =>
                {
                    b.Property<int>("Maritalstatusid")
                        .HasColumnName("maritalstatusid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Maritalstatusname")
                        .HasColumnName("maritalstatusname")
                        .HasColumnType("varchar(40)")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("Maritalstatusid");

                    b.ToTable("maritalstatus");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.MeasureUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<int?>("Freqvalue")
                        .HasColumnName("freqvalue")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnName("unit")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("MeasureUnit");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.MedicalProblemCategory", b =>
                {
                    b.Property<int>("Medid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("medid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Problemtype")
                        .HasColumnName("problemtype")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Medid")
                        .HasName("PK_MedicalProblem");

                    b.ToTable("MedicalProblemCategory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.MedicalProblemItem", b =>
                {
                    b.Property<int>("Itemid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("itemid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Itemname")
                        .HasColumnName("itemname")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("Medid")
                        .HasColumnName("medid")
                        .HasColumnType("int");

                    b.HasKey("Itemid");

                    b.HasIndex("Medid");

                    b.ToTable("MedicalProblemItem");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Messaging", b =>
                {
                    b.Property<int>("MsgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("msgID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Datesent")
                        .HasColumnName("datesent")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsRead")
                        .HasColumnName("isRead")
                        .HasColumnType("bit");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("RecieverId")
                        .HasColumnName("recieverID")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnName("senderID")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MsgId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("RecieverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messaging");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Nationality", b =>
                {
                    b.Property<int>("Nationalityid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nationalityid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Nationalityname")
                        .HasColumnName("nationalityname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Nationalityid");

                    b.ToTable("Nationality");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Network", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Enddate")
                        .HasColumnName("enddate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Startdate")
                        .HasColumnName("startdate")
                        .HasColumnType("date");

                    b.Property<bool?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("network");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.NextOfKinRelationship", b =>
                {
                    b.Property<int>("Nokid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("nokid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Noktype")
                        .HasColumnName("noktype")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Nokid");

                    b.ToTable("NextOfKinRelationship");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.NursingRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Categoryid")
                        .HasColumnName("categoryid")
                        .HasColumnType("int");

                    b.Property<int?>("Consultationid")
                        .HasColumnName("consultationid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnName("dateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Details")
                        .HasColumnName("details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Record")
                        .HasColumnName("record")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nursing_Record");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.OrderCategory", b =>
                {
                    b.Property<int>("Ordercategoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ordercategoryid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Categorycomment")
                        .HasColumnName("categorycomment")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Ordercategory1")
                        .HasColumnName("ordercategory")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<int?>("Ordertypeid")
                        .HasColumnName("ordertypeid")
                        .HasColumnType("int");

                    b.HasKey("Ordercategoryid");

                    b.HasIndex("Ordertypeid");

                    b.ToTable("OrderCategory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.OrderListing", b =>
                {
                    b.Property<int>("Orderlistid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("orderlistid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Ordercategoryid")
                        .HasColumnName("ordercategoryid")
                        .HasColumnType("int");

                    b.Property<string>("Orderthreshold")
                        .HasColumnName("orderthreshold")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Ordertype")
                        .HasColumnName("ordertype")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("Ordertypeid")
                        .HasColumnName("ordertypeid")
                        .HasColumnType("int");

                    b.HasKey("Orderlistid")
                        .HasName("pk_orderlisting");

                    b.HasIndex("Ordercategoryid");

                    b.HasIndex("Ordertypeid");

                    b.ToTable("OrderListing");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Orderstatusid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("orderstatusid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Orderstatus1")
                        .HasColumnName("orderstatus")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Orderstatusid");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.OrderType", b =>
                {
                    b.Property<int>("Ordertypeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ordertypeid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Ordername")
                        .HasColumnName("ordername")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Ordertypeid");

                    b.ToTable("OrderType");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Patient", b =>
                {
                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Accountcategory")
                        .HasColumnName("accountcategory")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("AlternateId1")
                        .HasColumnName("alternateID1")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("AlternateId2")
                        .HasColumnName("alternateID2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Autoid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("autoid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Bloodgroupid")
                        .HasColumnName("bloodgroupid")
                        .HasColumnType("int");

                    b.Property<int?>("Cardtypeid")
                        .HasColumnName("cardtypeid")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Datedeactivated")
                        .HasColumnName("datedeactivated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dateofdeath")
                        .HasColumnName("dateofdeath")
                        .HasColumnType("date");

                    b.Property<string>("Deathcause")
                        .HasColumnName("deathcause")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dob")
                        .HasColumnName("dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Emergencycontact")
                        .HasColumnName("emergencycontact")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Emergencyphone")
                        .HasColumnName("emergencyphone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Employeraddress")
                        .HasColumnName("employeraddress")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Employercity")
                        .HasColumnName("employercity")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Employercountry")
                        .HasColumnName("employercountry")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Employername")
                        .HasColumnName("employername")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("Employerstateid")
                        .HasColumnName("employerstateid")
                        .HasColumnType("int");

                    b.Property<int?>("Facilitatorid")
                        .HasColumnName("facilitatorid")
                        .HasColumnType("int");

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Genderid")
                        .HasColumnName("genderid")
                        .HasColumnType("int");

                    b.Property<string>("Genotype")
                        .HasColumnName("genotype")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Genotypeid")
                        .HasColumnName("genotypeid")
                        .HasColumnType("int");

                    b.Property<string>("Guardianname")
                        .HasColumnName("guardianname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Hmoclass1")
                        .HasColumnName("hmoclass1")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Hmoclass2")
                        .HasColumnName("hmoclass2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Hmoclass3")
                        .HasColumnName("hmoclass3")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Hmoname1")
                        .HasColumnName("hmoname1")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Hmoname2")
                        .HasColumnName("hmoname2")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Hmoname3")
                        .HasColumnName("hmoname3")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Hmonumber")
                        .HasColumnName("HMONumber")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Homephone")
                        .HasColumnName("homephone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool?>("Inactive")
                        .HasColumnName("inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Leadid")
                        .HasColumnName("leadid")
                        .HasColumnType("int");

                    b.Property<int?>("Maritalstatusid")
                        .HasColumnName("maritalstatusid")
                        .HasColumnType("int");

                    b.Property<string>("Mobilephone")
                        .HasColumnName("mobilephone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Mothername")
                        .HasColumnName("mothername")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Nationality")
                        .HasColumnName("nationality")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Nokinname")
                        .HasColumnName("nokinname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Nokoccupation")
                        .HasColumnName("nokoccupation")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Nokphonenumber")
                        .HasColumnName("nokphonenumber")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Nokrelationship")
                        .HasColumnName("nokrelationship")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Nokworkaddress")
                        .HasColumnName("nokworkaddress")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Occupation")
                        .HasColumnName("occupation")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Othername")
                        .HasColumnName("othername")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Photopath")
                        .HasColumnName("photopath")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Plantype")
                        .HasColumnName("plantype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postalcode")
                        .HasColumnName("postalcode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Principalcode")
                        .HasColumnName("principalcode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Refid")
                        .HasColumnName("refid")
                        .HasColumnType("int");

                    b.Property<string>("Relationship")
                        .HasColumnName("relationship")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Securityid")
                        .HasColumnName("securityid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Securitynumber")
                        .HasColumnName("securitynumber")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Servicetype")
                        .HasColumnName("servicetype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sponsid")
                        .HasColumnName("sponsid")
                        .HasColumnType("int");

                    b.Property<int?>("Stateid")
                        .HasColumnName("stateid")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Workphone")
                        .HasColumnName("workphone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Patientid");

                    b.HasIndex("Bloodgroupid");

                    b.HasIndex("Cardtypeid");

                    b.HasIndex("Facilitatorid");

                    b.HasIndex("Genderid");

                    b.HasIndex("Genotypeid");

                    b.HasIndex("Leadid");

                    b.HasIndex("Maritalstatusid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Refid");

                    b.HasIndex("Sponsid");

                    b.HasIndex("Stateid");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.PatientMedicalHistory", b =>
                {
                    b.Property<int>("Pid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Dateend")
                        .HasColumnName("dateend")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Datestart")
                        .HasColumnName("datestart")
                        .HasColumnType("date");

                    b.Property<string>("Diagnosiscode")
                        .HasColumnName("diagnosiscode")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Occurence")
                        .HasColumnName("occurence")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Problemdesc")
                        .HasColumnName("problemdesc")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int?>("Problemid")
                        .HasColumnName("problemid")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Reaction")
                        .HasColumnName("reaction")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Pid");

                    b.HasIndex("Patientid");

                    b.HasIndex("Problemid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Patient_MedicalHistory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.PatientOrder", b =>
                {
                    b.Property<int>("Patientorderid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("patientorderid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Completedby")
                        .HasColumnName("completedby")
                        .HasColumnType("int");

                    b.Property<byte[]>("Docimage")
                        .HasColumnName("docimage")
                        .HasColumnType("image");

                    b.Property<string>("Docpath")
                        .HasColumnName("docpath")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int?>("Ordercategoryid")
                        .HasColumnName("ordercategoryid")
                        .HasColumnType("int");

                    b.Property<string>("Ordercomment")
                        .HasColumnName("ordercomment")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("Orderdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("orderdate")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Orderlistid")
                        .HasColumnName("orderlistid")
                        .HasColumnType("int");

                    b.Property<int?>("Orderstatusid")
                        .HasColumnName("orderstatusid")
                        .HasColumnType("int");

                    b.Property<int?>("Ordertypeid")
                        .HasColumnName("ordertypeid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Raisedby")
                        .HasColumnName("raisedby")
                        .HasColumnType("int");

                    b.HasKey("Patientorderid");

                    b.HasIndex("Completedby");

                    b.HasIndex("Ordercategoryid");

                    b.HasIndex("Orderlistid");

                    b.HasIndex("Orderstatusid");

                    b.HasIndex("Ordertypeid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Raisedby");

                    b.ToTable("Patient_Order");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.PatientOrderDetails", b =>
                {
                    b.Property<int>("Patientorderdetailsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("patientorderdetailsid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Completedby")
                        .HasColumnName("completedby")
                        .HasColumnType("int");

                    b.Property<byte[]>("Docimage")
                        .HasColumnName("docimage")
                        .HasColumnType("image");

                    b.Property<string>("Docpath")
                        .HasColumnName("docpath")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int?>("Ordercategoryid")
                        .HasColumnName("ordercategoryid")
                        .HasColumnType("int");

                    b.Property<string>("Ordercomment")
                        .HasColumnName("ordercomment")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("Orderdate")
                        .HasColumnName("orderdate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Orderlistid")
                        .HasColumnName("orderlistid")
                        .HasColumnType("int");

                    b.Property<int?>("Orderstatusid")
                        .HasColumnName("orderstatusid")
                        .HasColumnType("int");

                    b.Property<int?>("Ordertypeid")
                        .HasColumnName("ordertypeid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Patientorderid")
                        .HasColumnName("patientorderid")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Raisedby")
                        .HasColumnName("raisedby")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnName("result")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("Patientorderdetailsid");

                    b.HasIndex("Patientorderid");

                    b.ToTable("Patient_Order_Details");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.PatientQuestionnaire", b =>
                {
                    b.Property<int>("Pqid")
                        .HasColumnName("pqid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Patientanswer")
                        .HasColumnName("patientanswer")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Qcatid")
                        .HasColumnName("qcatid")
                        .HasColumnType("int");

                    b.Property<int?>("Qid")
                        .HasColumnName("qid")
                        .HasColumnType("int");

                    b.HasKey("Pqid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Qcatid");

                    b.HasIndex("Qid");

                    b.ToTable("Patient_Questionnaire");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.PatientType", b =>
                {
                    b.Property<int>("PatienttypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatienttypeId");

                    b.ToTable("PatientType");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Personnel", b =>
                {
                    b.Property<int>("Staffid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("staffid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Deptid")
                        .HasColumnName("deptid")
                        .HasColumnType("int");

                    b.Property<int?>("Designationid")
                        .HasColumnName("designationid")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Emergencycontact")
                        .HasColumnName("emergencycontact")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Emergencyphone")
                        .HasColumnName("emergencyphone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Homephone")
                        .HasColumnName("homephone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("IdentificationModeid")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Middlename")
                        .HasColumnName("middlename")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Mobilephone")
                        .HasColumnName("mobilephone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Titleid")
                        .HasColumnName("titleid")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Workphone")
                        .HasColumnName("workphone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Staffid");

                    b.HasIndex("Deptid");

                    b.HasIndex("Designationid");

                    b.HasIndex("IdentificationModeid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Titleid");

                    b.ToTable("Personnel");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Image")
                        .HasColumnName("image")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool?>("Issynced")
                        .HasColumnName("issynced")
                        .HasColumnType("bit");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("SyncAt")
                        .HasColumnName("sync_at")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Patientid");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("plan");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Problem1")
                        .HasColumnName("problem")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Problem");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnName("category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Genderconstraint")
                        .HasColumnName("genderconstraint")
                        .HasColumnType("int");

                    b.Property<int?>("Procedurecatid")
                        .HasColumnName("procedurecatid")
                        .HasColumnType("int");

                    b.Property<string>("Procedurecode")
                        .HasColumnName("procedurecode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Procedurename")
                        .HasColumnName("procedurename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Procedurepa")
                        .HasColumnName("procedurepa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Procedurepp")
                        .HasColumnName("procedurepp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Procedurepr")
                        .HasColumnName("procedurepr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Procedurereferral")
                        .HasColumnName("procedurereferral")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("procedure");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ProcedurePricelist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<int>("Hmoid")
                        .HasColumnName("hmoid")
                        .HasColumnType("int");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnName("price")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Procedurename")
                        .IsRequired()
                        .HasColumnName("procedurename")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProcedurePricelist");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ProcedureUtilization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DiagnosisId")
                        .HasColumnName("DiagnosisID")
                        .HasColumnType("int");

                    b.Property<bool?>("Isclaimsgenerated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isclaimsgenerated")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Paymenttype")
                        .HasColumnName("paymenttype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProcedureId")
                        .HasColumnName("ProcedureID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("ProcedureId");

                    b.ToTable("procedure_utilization");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accountnumber")
                        .HasColumnName("accountnumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contactemail")
                        .HasColumnName("contactemail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contactname")
                        .HasColumnName("contactname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contactphone")
                        .HasColumnName("contactphone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Hmoproviderid")
                        .HasColumnName("hmoproviderid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Isreferral")
                        .HasColumnName("isreferral")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Network")
                        .HasColumnName("network")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tin")
                        .HasColumnName("tin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("provider");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ProviderChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("EnrolleeId")
                        .HasColumnName("enrolleeID")
                        .HasColumnType("int");

                    b.Property<bool?>("Issynced")
                        .HasColumnName("issynced")
                        .HasColumnType("bit");

                    b.Property<string>("Oldprovider")
                        .HasColumnName("oldprovider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Providereffectivedate")
                        .HasColumnName("providereffectivedate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Providerterminationdate")
                        .HasColumnName("providerterminationdate")
                        .HasColumnType("date");

                    b.Property<string>("Reason")
                        .HasColumnName("reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sequence")
                        .HasColumnName("sequence")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SyncedAt")
                        .HasColumnName("synced_at")
                        .HasColumnType("datetime");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrolleeId");

                    b.HasIndex("Userid");

                    b.ToTable("provider_change");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ProviderNetwork", b =>
                {
                    b.Property<int>("Providerid")
                        .HasColumnName("providerid")
                        .HasColumnType("int");

                    b.Property<int>("Networkid")
                        .HasColumnName("networkid")
                        .HasColumnType("int");

                    b.HasKey("Providerid", "Networkid");

                    b.ToTable("provider_network");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ProviderSchedule", b =>
                {
                    b.Property<int>("Provschid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("provschid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adjuster")
                        .IsRequired()
                        .HasColumnName("adjuster")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Days")
                        .IsRequired()
                        .HasColumnName("days")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("int");

                    b.Property<string>("Endtime")
                        .IsRequired()
                        .HasColumnName("endtime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Iscurrent")
                        .HasColumnName("iscurrent")
                        .HasColumnType("bit");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<int?>("Provid")
                        .HasColumnName("provid")
                        .HasColumnType("int");

                    b.Property<int?>("Specid")
                        .HasColumnName("specid")
                        .HasColumnType("int");

                    b.Property<string>("Starttime")
                        .IsRequired()
                        .HasColumnName("starttime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Provschid")
                        .HasName("PK__Provider__0EF5CA8BD8860088");

                    b.HasIndex("Locationid");

                    b.HasIndex("Provid");

                    b.HasIndex("Specid");

                    b.ToTable("ProviderSchedule");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.QuestionCategory", b =>
                {
                    b.Property<int>("Qcatid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("qcatid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Categoryname")
                        .HasColumnName("categoryname")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.HasKey("Qcatid");

                    b.ToTable("QuestionCategory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Questionnaire", b =>
                {
                    b.Property<int>("Qid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("qid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Question")
                        .HasColumnName("question")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int?>("Questioncategoryid")
                        .HasColumnName("questioncategoryid")
                        .HasColumnType("int");

                    b.HasKey("Qid");

                    b.HasIndex("Questioncategoryid");

                    b.ToTable("Questionnaire");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.QueueManager", b =>
                {
                    b.Property<int>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("listID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Benpackageid")
                        .HasColumnName("benpackageid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<int?>("Deptid")
                        .HasColumnName("deptid")
                        .HasColumnType("int");

                    b.Property<int?>("FromPersonnelid")
                        .HasColumnName("fromPersonnelid")
                        .HasColumnType("int");

                    b.Property<bool?>("IsRemoved")
                        .HasColumnName("isRemoved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSeen")
                        .HasColumnName("isSeen")
                        .HasColumnType("bit");

                    b.Property<bool?>("Isflagged")
                        .HasColumnName("isflagged")
                        .HasColumnType("bit");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("RemovedBy")
                        .HasColumnName("removedBy")
                        .HasColumnType("int");

                    b.Property<int?>("ToPersonnelid")
                        .HasColumnName("toPersonnelid")
                        .HasColumnType("int");

                    b.HasKey("ListId");

                    b.HasIndex("Benpackageid");

                    b.HasIndex("Deptid");

                    b.HasIndex("FromPersonnelid");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("RemovedBy");

                    b.HasIndex("ToPersonnelid");

                    b.ToTable("QueueManager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ReceivingStore", b =>
                {
                    b.Property<int>("Receivingstoreid")
                        .HasColumnName("receivingstoreid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Storedescription")
                        .HasColumnName("storedescription")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Storename")
                        .HasColumnName("storename")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Receivingstoreid");

                    b.HasIndex("ProviderId");

                    b.ToTable("ReceivingStore");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ReferenceMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Filepath")
                        .IsRequired()
                        .HasColumnName("filepath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Reference_Material");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Referral", b =>
                {
                    b.Property<int>("Refid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("refid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Reftype")
                        .HasColumnName("reftype")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Refid");

                    b.ToTable("Referral");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ReferringPhysician", b =>
                {
                    b.Property<int>("Refid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("refid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Physicianname")
                        .IsRequired()
                        .HasColumnName("physicianname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Refid")
                        .HasName("PK__Referrin__198472FDAD57E270");

                    b.ToTable("ReferringPhysician");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Reminder", b =>
                {
                    b.Property<int>("Reminderid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("reminderid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Reminder1")
                        .IsRequired()
                        .HasColumnName("reminder")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Reminderid");

                    b.ToTable("Reminder");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Renewal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amountdue")
                        .HasColumnName("amountdue")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("Amountpaid")
                        .HasColumnName("amountpaid")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("Contractnum")
                        .HasColumnName("contractnum")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Coverageenddate")
                        .HasColumnName("coverageenddate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Coveragestatedate")
                        .HasColumnName("coveragestatedate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Enrolleeid")
                        .HasColumnName("enrolleeid")
                        .HasColumnType("int");

                    b.Property<string>("Flag")
                        .HasColumnName("flag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Isexpires")
                        .HasColumnName("isexpires")
                        .HasColumnType("bit");

                    b.Property<bool?>("Issynced")
                        .HasColumnName("issynced")
                        .HasColumnType("bit");

                    b.Property<bool?>("Mutation")
                        .HasColumnName("mutation")
                        .HasColumnType("bit");

                    b.Property<string>("Paymentstatus")
                        .HasColumnName("paymentstatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reasonfortermination")
                        .HasColumnName("reasonfortermination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Receiptnum")
                        .HasColumnName("receiptnum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SyncedAt")
                        .HasColumnName("synced_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Syncid")
                        .HasColumnName("syncid")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Userid")
                        .HasColumnName("userid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Enrolleeid");

                    b.HasIndex("Userid");

                    b.ToTable("renewal");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Role", b =>
                {
                    b.Property<int>("Roleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("roleid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Roledescription")
                        .HasColumnName("roledescription")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Rolename")
                        .HasColumnName("rolename")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Roleid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Service", b =>
                {
                    b.Property<int>("Serviceid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("serviceid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Deptid")
                        .HasColumnName("deptid")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Servicecode")
                        .HasColumnName("servicecode")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Servicedesc")
                        .HasColumnName("servicedesc")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("Servicetypeid")
                        .HasColumnName("servicetypeid")
                        .HasColumnType("int");

                    b.HasKey("Serviceid");

                    b.HasIndex("Deptid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Servicetypeid");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ServiceTariff", b =>
                {
                    b.Property<int>("Servtariffid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("servtariffid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<int?>("Serviceid")
                        .HasColumnName("serviceid")
                        .HasColumnType("int");

                    b.Property<double?>("Tariffamount")
                        .HasColumnName("tariffamount")
                        .HasColumnType("float");

                    b.Property<int?>("Tariffid")
                        .HasColumnName("tariffid")
                        .HasColumnType("int");

                    b.HasKey("Servtariffid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Serviceid");

                    b.HasIndex("Tariffid");

                    b.ToTable("Service_Tariff");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ServiceType", b =>
                {
                    b.Property<int>("Servicetypeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("servicetypeid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Servicetypedesc")
                        .HasColumnName("servicetypedesc")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("Servicetypeid");

                    b.ToTable("ServiceType");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Specialization", b =>
                {
                    b.Property<int>("Specid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("specid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Specname")
                        .IsRequired()
                        .HasColumnName("specname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Specid")
                        .HasName("PK__Speciali__72C1C97BF664F5C7");

                    b.HasIndex("Locationid");

                    b.ToTable("Specialization");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.SpecializationSchedule", b =>
                {
                    b.Property<int>("Specschid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("specschid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adjuster")
                        .IsRequired()
                        .HasColumnName("adjuster")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Days")
                        .IsRequired()
                        .HasColumnName("days")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("int");

                    b.Property<string>("Endtime")
                        .IsRequired()
                        .HasColumnName("endtime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Iscurrent")
                        .HasColumnName("iscurrent")
                        .HasColumnType("bit");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<int?>("Specid")
                        .HasColumnName("specid")
                        .HasColumnType("int");

                    b.Property<string>("Starttime")
                        .IsRequired()
                        .HasColumnName("starttime")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Specschid")
                        .HasName("PK__Speciali__3A71E2D82A4295DC");

                    b.HasIndex("Locationid");

                    b.HasIndex("Specid");

                    b.ToTable("SpecializationSchedule");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Sponsor", b =>
                {
                    b.Property<int>("Sponsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sponsid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<string>("Sponsortype")
                        .HasColumnName("sponsortype")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Sponsid");

                    b.ToTable("Sponsor");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.State", b =>
                {
                    b.Property<int>("Stateid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("stateid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Countryid")
                        .HasColumnName("countryid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Statename")
                        .HasColumnName("statename")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Stateid");

                    b.HasIndex("Countryid");

                    b.ToTable("State");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Supplier", b =>
                {
                    b.Property<int>("Supplierid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("supplierid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnName("address1")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("Address2")
                        .HasColumnName("address2")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<string>("Bankaccountno")
                        .HasColumnName("bankaccountno")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Bankname")
                        .HasColumnName("bankname")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Contactname")
                        .HasColumnName("contactname")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Phone1")
                        .HasColumnName("phone1")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone2")
                        .HasColumnName("phone2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("Providerid")
                        .HasColumnName("providerid")
                        .HasColumnType("int");

                    b.Property<string>("Specialty")
                        .HasColumnName("specialty")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Suppliername")
                        .HasColumnName("suppliername")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("Suppliertypeid")
                        .HasColumnName("suppliertypeid")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Supplierid");

                    b.HasIndex("Providerid");

                    b.HasIndex("Suppliertypeid");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.SupplierType", b =>
                {
                    b.Property<int>("Suppliertypeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("suppliertypeid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnName("comments")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Supplierdesc")
                        .HasColumnName("supplierdesc")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.HasKey("Suppliertypeid");

                    b.ToTable("SupplierType");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Tariff", b =>
                {
                    b.Property<int>("Tariffid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tariffid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Expirydate")
                        .HasColumnName("expirydate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Tariffdesc")
                        .HasColumnName("tariffdesc")
                        .HasColumnType("varchar(2000)")
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<string>("Tariffname")
                        .HasColumnName("tariffname")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("Tariffid");

                    b.HasIndex("ProviderId");

                    b.ToTable("Tariff");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Temp", b =>
                {
                    b.Property<string>("DiagnosisCode")
                        .HasColumnName("DIAGNOSIS CODE")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LongDescription")
                        .HasColumnName("LONG DESCRIPTION")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("NfExcl")
                        .HasColumnName("NF EXCL")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ShortDescription")
                        .HasColumnName("SHORT DESCRIPTION")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("DiagnosisCode");

                    b.ToTable("temp");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateAbdomen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Bowelsound")
                        .HasColumnName("bowelsound")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Distended")
                        .HasColumnName("distended")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Firm")
                        .HasColumnName("firm")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Hepatomegaly")
                        .HasColumnName("hepatomegaly")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Hyperemic")
                        .HasColumnName("hyperemic")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Renomegaly")
                        .HasColumnName("renomegaly")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Soft")
                        .HasColumnName("soft")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Splenomegaly")
                        .HasColumnName("splenomegaly")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Tender")
                        .HasColumnName("tender")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_abdomen");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Bedrest")
                        .HasColumnName("bedrest")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Monitorpainscore")
                        .HasColumnName("monitorpainscore")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Monitorvitalsigns")
                        .HasColumnName("monitorvitalsigns")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Monitorwounddrainage")
                        .HasColumnName("monitorwounddrainage")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_activity");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateAllergies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Allergies")
                        .HasColumnName("allergies")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Submit")
                        .HasColumnName("submit")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_allergies");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateAllreadyfordischarge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Allnursingmedicationxraycollectedreadyfordischarge")
                        .HasColumnName("allnursingmedicationxraycollectedreadyfordischarge")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_allreadyfordischarge");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateAnthpropometry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Aga")
                        .HasColumnName("aga")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Headcircumferencecm")
                        .HasColumnName("headcircumferencecm")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Lengthcm")
                        .HasColumnName("lengthcm")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Lga")
                        .HasColumnName("lga")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Sga")
                        .HasColumnName("sga")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_anthpropometry");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateAntibiotics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("A")
                        .HasColumnName("a")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("B")
                        .HasColumnName("b")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("C")
                        .HasColumnName("c")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("D")
                        .HasColumnName("d")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("E")
                        .HasColumnName("e")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("F")
                        .HasColumnName("f")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("G")
                        .HasColumnName("g")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_antibiotics");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateArvdrugs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Adherence")
                        .HasColumnName("adherence")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Otherspleasespecify")
                        .HasColumnName("otherspleasespecify")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Regimen")
                        .HasColumnName("regimen")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Whypoorfairadherence1")
                        .HasColumnName("whypoorfairadherence1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_arvdrugs");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateAssesment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Assement")
                        .HasColumnName("assement")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_assesment");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateAttitude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Extension")
                        .HasColumnName("extension")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Flexion")
                        .HasColumnName("flexion")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Grasp")
                        .HasColumnName("grasp")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Mororeflex")
                        .HasColumnName("mororeflex")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Partialflexion")
                        .HasColumnName("partialflexion")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Suck")
                        .HasColumnName("suck")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_attitude");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateBiodata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Columns")
                        .HasColumnName("columns")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Columns1")
                        .HasColumnName("columns1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Dateofbirth")
                        .HasColumnName("dateofbirth")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Datetime")
                        .HasColumnName("datetime")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Hospitalnumber")
                        .HasColumnName("hospitalnumber")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientname")
                        .HasColumnName("patientname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Submit")
                        .HasColumnName("submit")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_biodata");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateBloodgasanalysisform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Angap")
                        .HasColumnName("angap")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Beecf")
                        .HasColumnName("beecf")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Bun")
                        .HasColumnName("bun")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Cl")
                        .HasColumnName("cl")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Date")
                        .HasColumnName("date")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Glu")
                        .HasColumnName("glu")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Hb")
                        .HasColumnName("hb")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Hco3")
                        .HasColumnName("hco3")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Hct")
                        .HasColumnName("hct")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("K")
                        .HasColumnName("k")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Lac")
                        .HasColumnName("lac")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Na")
                        .HasColumnName("na")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Pco2")
                        .HasColumnName("pco2")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Ph")
                        .HasColumnName("ph")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Po2")
                        .HasColumnName("po2")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Po2fio2")
                        .HasColumnName("po2fio2")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Sampletype")
                        .HasColumnName("sampletype")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("So2")
                        .HasColumnName("so2")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Tco2")
                        .HasColumnName("tco2")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_bloodgasanalysisform");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateBloodsugar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Bloodsugar")
                        .HasColumnName("bloodsugar")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Submit")
                        .HasColumnName("submit")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_bloodsugar");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateCapturevitals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Height")
                        .HasColumnName("height")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientnumber")
                        .HasColumnName("patientnumber")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_capturevitals");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateCategory", b =>
                {
                    b.Property<int>("Tempcatid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("tempcatid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Categoryname")
                        .HasColumnName("categoryname")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Specializationid")
                        .HasColumnName("specializationid")
                        .HasColumnType("int");

                    b.HasKey("Tempcatid");

                    b.ToTable("TemplateCategory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateCathetercouldbepassedthrough", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Columns")
                        .HasColumnName("columns")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Columns1")
                        .HasColumnName("columns1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("L")
                        .HasColumnName("l")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("R")
                        .HasColumnName("r")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_cathetercouldbepassedthrough");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateChromeform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_chromeform");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateChromiumform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Height")
                        .HasColumnName("height")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_chromiumform");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateClinicalnotes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Clinicalnotes")
                        .HasColumnName("clinicalnotes")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Date")
                        .HasColumnName("date")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Painscore")
                        .HasColumnName("painscore")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_clinicalnotes");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateColonoscopy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Analcanalonretroflexion")
                        .HasColumnName("analcanalonretroflexion")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Ascendingcolon")
                        .HasColumnName("ascendingcolon")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Biopsies")
                        .HasColumnName("biopsies")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Bowelpreparation")
                        .HasColumnName("bowelpreparation")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Caecum")
                        .HasColumnName("caecum")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Colonoscopenumber")
                        .HasColumnName("colonoscopenumber")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Dateofprcedure")
                        .HasColumnName("dateofprcedure")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Descendingcolon")
                        .HasColumnName("descendingcolon")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Diagnosis")
                        .HasColumnName("diagnosis")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Endoscopist")
                        .HasColumnName("endoscopist")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Extentofintubation1")
                        .HasColumnName("extentofintubation1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Indication")
                        .HasColumnName("indication")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Quantityofbowelpreparation")
                        .HasColumnName("quantityofbowelpreparation")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Rectum")
                        .HasColumnName("rectum")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Report")
                        .HasColumnName("report")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Sedation")
                        .HasColumnName("sedation")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Symoidcolon")
                        .HasColumnName("symoidcolon")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Textarea")
                        .HasColumnName("textarea")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Transversecolon")
                        .HasColumnName("transversecolon")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Treatmentandoutcome")
                        .HasColumnName("treatmentandoutcome")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_colonoscopy");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Postebtorders")
                        .HasColumnName("postebtorders")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_comment");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateConsultantincharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Consultantincharge")
                        .HasColumnName("consultantincharge")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Submit")
                        .HasColumnName("submit")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_consultantincharge");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateCotrimoxazole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Adherence")
                        .HasColumnName("adherence")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Afraidaffectedbysideeffect")
                        .HasColumnName("afraidaffectedbysideeffect")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Busyworkingathome")
                        .HasColumnName("busyworkingathome")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Changeinroutineawayfromhome")
                        .HasColumnName("changeinroutineawayfromhome")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Didnotunderstandhowtotakemedications")
                        .HasColumnName("didnotunderstandhowtotakemedications")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Didnotwantotherstoknow")
                        .HasColumnName("didnotwantotherstoknow")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Didnotwanttotakemedications")
                        .HasColumnName("didnotwanttotakemedications")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Dose")
                        .HasColumnName("dose")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Drugstockout")
                        .HasColumnName("drugstockout")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Fellasleepsleptthroughdose")
                        .HasColumnName("fellasleepsleptthroughdose")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Feltoverwhelmeddepressed")
                        .HasColumnName("feltoverwhelmeddepressed")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Feltsickwell")
                        .HasColumnName("feltsickwell")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Feltwell")
                        .HasColumnName("feltwell")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Forgot")
                        .HasColumnName("forgot")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Gotpregnancy")
                        .HasColumnName("gotpregnancy")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Notabletopay")
                        .HasColumnName("notabletopay")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Others")
                        .HasColumnName("others")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Otherspleasespecify")
                        .HasColumnName("otherspleasespecify")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientmoved")
                        .HasColumnName("patientmoved")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Ranoutofmedication")
                        .HasColumnName("ranoutofmedication")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Toomanypills")
                        .HasColumnName("toomanypills")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_cotrimoxazole");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateDayodaysurgery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Bedrest")
                        .HasColumnName("bedrest")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Monitorpainscore")
                        .HasColumnName("monitorpainscore")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Monitorvitalsigns")
                        .HasColumnName("monitorvitalsigns")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_dayodaysurgery");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateDeliverydetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Lscs")
                        .HasColumnName("lscs")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Maternalsedation")
                        .HasColumnName("maternalsedation")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Modeofdelivery")
                        .HasColumnName("modeofdelivery")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Onsetoflabor")
                        .HasColumnName("onsetoflabor")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Presentation")
                        .HasColumnName("presentation")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_deliverydetails");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateDetailsofresuscitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Columns")
                        .HasColumnName("columns")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Nameofmedicalstaff")
                        .HasColumnName("nameofmedicalstaff")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Signatureofmedicalstaff")
                        .HasColumnName("signatureofmedicalstaff")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Textfield")
                        .HasColumnName("textfield")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_detailsofresuscitation");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateDiagnosisanddifferentials", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Diagnosisanddifferentials")
                        .HasColumnName("diagnosisanddifferentials")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_diagnosisanddifferentials");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateDialysisprescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Anticoagulation")
                        .HasColumnName("anticoagulation")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Bloodflowrate")
                        .HasColumnName("bloodflowrate")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Dialysisaccessused")
                        .HasColumnName("dialysisaccessused")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Dialysisflowrate")
                        .HasColumnName("dialysisflowrate")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Treatmentduration")
                        .HasColumnName("treatmentduration")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Ultafiltration")
                        .HasColumnName("ultafiltration")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_dialysisprescription");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateDialysisvitaltest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Indicationsfordialysis")
                        .HasColumnName("indicationsfordialysis")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Posttreatmentdiagnoses")
                        .HasColumnName("posttreatmentdiagnoses")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Pretreatmentdiagnoses")
                        .HasColumnName("pretreatmentdiagnoses")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Pretreatmentlabtestresult")
                        .HasColumnName("pretreatmentlabtestresult")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Pretreatmentweight")
                        .HasColumnName("pretreatmentweight")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_dialysisvitaltest");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateDiet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Diet")
                        .HasColumnName("diet")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_diet");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateDietorder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Whatdietshouldthepatientbeplacedonkindlyinformthenurses")
                        .HasColumnName("whatdietshouldthepatientbeplacedonkindlyinformthenurses")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_dietorder");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateDischargeplanning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Columns")
                        .HasColumnName("columns")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Otherproblemsidentifiedassessmentandplandischargeplanning")
                        .HasColumnName("otherproblemsidentifiedassessmentandplandischargeplanning")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Socialsupportneededathome")
                        .HasColumnName("socialsupportneededathome")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_dischargeplanning");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateExpectedoutcomesofcare", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Expectedoutcomeofcare")
                        .HasColumnName("expectedoutcomeofcare")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_expectedoutcomesofcare");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateFirstexaminationatbirth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Date")
                        .HasColumnName("date")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_firstexaminationatbirth");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateFluidfeeds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Feeds")
                        .HasColumnName("feeds")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Fluids")
                        .HasColumnName("fluids")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Types")
                        .HasColumnName("types")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Typevia")
                        .HasColumnName("typevia")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_fluidfeeds");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateGastroscopy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Comorbidity")
                        .HasColumnName("comorbidity")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Date")
                        .HasColumnName("date")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Dateofbirth")
                        .HasColumnName("dateofbirth")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Endoscopenumber")
                        .HasColumnName("endoscopenumber")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Endoscopist")
                        .HasColumnName("endoscopist")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Hospitalnumber")
                        .HasColumnName("hospitalnumber")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Indication")
                        .HasColumnName("indication")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Intubation")
                        .HasColumnName("intubation")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Sedation")
                        .HasColumnName("sedation")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_gastroscopy");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateGeneralapearances", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Addedsounds")
                        .HasColumnName("addedsounds")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Ae")
                        .HasColumnName("ae")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Blue")
                        .HasColumnName("blue")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Conscious")
                        .HasColumnName("conscious")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Hr")
                        .HasColumnName("hr")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Hsiii")
                        .HasColumnName("hsiii")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Jaundiced")
                        .HasColumnName("jaundiced")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Mbp")
                        .HasColumnName("mbp")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Murmur")
                        .HasColumnName("murmur")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Pale")
                        .HasColumnName("pale")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Pink")
                        .HasColumnName("pink")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Rr")
                        .HasColumnName("rr")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Sleeping")
                        .HasColumnName("sleeping")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_generalapearances");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateHomesupport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Arranged")
                        .HasColumnName("arranged")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_homesupport");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateInformationgiventopatientandcaregiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Continuingcare")
                        .HasColumnName("continuingcare")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Diet")
                        .HasColumnName("diet")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Medication")
                        .HasColumnName("medication")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Specialtreatmentandcareanduseofequipment")
                        .HasColumnName("specialtreatmentandcareanduseofequipment")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_informationgiventopatientandcaregiver");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateInformedofdischarge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientandrelativecaregiverinformedofdischarge")
                        .HasColumnName("patientandrelativecaregiverinformedofdischarge")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_informedofdischarge");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateInn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Adherence")
                        .HasColumnName("adherence")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Afraidaffectedbysideeffect")
                        .HasColumnName("afraidaffectedbysideeffect")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Busyworkingatschool")
                        .HasColumnName("busyworkingatschool")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Changeinroutineawayfromhome")
                        .HasColumnName("changeinroutineawayfromhome")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Didnotunderstandhowtotakemedication")
                        .HasColumnName("didnotunderstandhowtotakemedication")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Didnotwantotherstoknow")
                        .HasColumnName("didnotwantotherstoknow")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Didnotwanttotakemedications")
                        .HasColumnName("didnotwanttotakemedications")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Dose")
                        .HasColumnName("dose")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Drugstockout")
                        .HasColumnName("drugstockout")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Fellasleepsleptthroughdose")
                        .HasColumnName("fellasleepsleptthroughdose")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Feltoverwhelmeddepressed")
                        .HasColumnName("feltoverwhelmeddepressed")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Feltsickbad")
                        .HasColumnName("feltsickbad")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Feltwell")
                        .HasColumnName("feltwell")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Gotpregnant")
                        .HasColumnName("gotpregnant")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Iforgot")
                        .HasColumnName("iforgot")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Notabletopay")
                        .HasColumnName("notabletopay")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Otherspleasespecify")
                        .HasColumnName("otherspleasespecify")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientmoved")
                        .HasColumnName("patientmoved")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Ranoutofmedication")
                        .HasColumnName("ranoutofmedication")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Toomanypills")
                        .HasColumnName("toomanypills")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_inn");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateInpatientform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Columns")
                        .HasColumnName("columns")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientno")
                        .HasColumnName("patientno")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Payertype")
                        .HasColumnName("payertype")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_inpatientform");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateInvestigation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Investigation")
                        .HasColumnName("investigation")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_investigation");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateJaundice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Conj")
                        .HasColumnName("conj")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Jaundice")
                        .HasColumnName("jaundice")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Lastsbtotal")
                        .HasColumnName("lastsbtotal")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phototherapy")
                        .HasColumnName("phototherapy")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_jaundice");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateLaboratory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Biochemicaldatalaboratorytestandprocedure")
                        .HasColumnName("biochemicaldatalaboratorytestandprocedure")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Foodnutritionrelatedhistory2472hoursdietaryrecall")
                        .HasColumnName("foodnutritionrelatedhistory2472hoursdietaryrecall")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Glands")
                        .HasColumnName("glands")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Nutritiondiagnosis")
                        .HasColumnName("nutritiondiagnosis")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Nutritionintervention")
                        .HasColumnName("nutritionintervention")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Tongue")
                        .HasColumnName("tongue")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_laboratory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateLaboratory1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Columns")
                        .HasColumnName("columns")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Coordinationofnutritioncare")
                        .HasColumnName("coordinationofnutritioncare")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Nutritioncounselling")
                        .HasColumnName("nutritioncounselling")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Nutritioneducaion")
                        .HasColumnName("nutritioneducaion")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_laboratory1");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateLastsawadoctoron", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Lastsawadoctoron")
                        .HasColumnName("lastsawadoctoron")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_lastsawadoctoron");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateManagementchangesinthelast24hrs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Am")
                        .HasColumnName("am")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Cxr")
                        .HasColumnName("cxr")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Pm")
                        .HasColumnName("pm")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_managementchangesinthelast24hrs");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateMaster", b =>
                {
                    b.Property<int>("Masterid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("masterid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<int?>("Adjusterid")
                        .HasColumnName("adjusterid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Formcomments")
                        .HasColumnName("formcomments")
                        .HasColumnType("text");

                    b.Property<string>("Formdescription")
                        .HasColumnName("formdescription")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("Formname")
                        .HasColumnName("formname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("Iscurrent")
                        .HasColumnName("iscurrent")
                        .HasColumnType("bit");

                    b.Property<string>("Jsonform")
                        .HasColumnName("jsonform")
                        .HasColumnType("text");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<int?>("Tempcatid")
                        .HasColumnName("tempcatid")
                        .HasColumnType("int");

                    b.HasKey("Masterid");

                    b.ToTable("TemplateMaster");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateMaternalrecords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Antenatalscan")
                        .HasColumnName("antenatalscan")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Dateofadmission")
                        .HasColumnName("dateofadmission")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Dob")
                        .HasColumnName("dob")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Eddbydate")
                        .HasColumnName("eddbydate")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Maternalproblem")
                        .HasColumnName("maternalproblem")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Mothersname")
                        .HasColumnName("mothersname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Nameofnurseormidwife")
                        .HasColumnName("nameofnurseormidwife")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Registrationnumber")
                        .HasColumnName("registrationnumber")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Relevantfamilyhistory")
                        .HasColumnName("relevantfamilyhistory")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Relevantmaterialmedication")
                        .HasColumnName("relevantmaterialmedication")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_maternalrecords");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateMedicalofficerandcarecoordinator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Datetime")
                        .HasColumnName("datetime")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Signature")
                        .HasColumnName("signature")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Time")
                        .HasColumnName("time")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_medicalofficerandcarecoordinator");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateMedicationanddressings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Informationonwheretoobtainfurthersupply")
                        .HasColumnName("informationonwheretoobtainfurthersupply")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Instructiongiven")
                        .HasColumnName("instructiongiven")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Obtained")
                        .HasColumnName("obtained")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_medicationanddressings");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateMedicationandothertreatmentalreadygiven", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Medicationothertreatmentalreadygiven")
                        .HasColumnName("medicationothertreatmentalreadygiven")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_medicationandothertreatmentalreadygiven");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateMedications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Antiemeticprophylaxisasperorder")
                        .HasColumnName("antiemeticprophylaxisasperorder")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Applytedstockings")
                        .HasColumnName("applytedstockings")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Asperanethesia")
                        .HasColumnName("asperanethesia")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Columns")
                        .HasColumnName("columns")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Columns1")
                        .HasColumnName("columns1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Injectionofclexaneat2000")
                        .HasColumnName("injectionofclexaneat2000")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Prophylacticantibioticprescribed")
                        .HasColumnName("prophylacticantibioticprescribed")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_medications");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateMinivitals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Height")
                        .HasColumnName("height")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Pulse")
                        .HasColumnName("pulse")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Temperature")
                        .HasColumnName("temperature")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_minivitals");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateMother", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Age")
                        .HasColumnName("age")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Causeofdeath")
                        .HasColumnName("causeofdeath")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Health")
                        .HasColumnName("health")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_mother");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateNeuro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Findings")
                        .HasColumnName("findings")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_neuro");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateNeurologic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Examinationfindings")
                        .HasColumnName("examinationfindings")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_neurologic");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateNeurologicexam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abnormalmovement")
                        .HasColumnName("abnormalmovement")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Fits")
                        .HasColumnName("fits")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Jittery")
                        .HasColumnName("jittery")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Lethargic")
                        .HasColumnName("lethargic")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_neurologicexam");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateOtherconcern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Otherconcern")
                        .HasColumnName("otherconcern")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_otherconcern");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateOtherdetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Consulthospitalizereferlink")
                        .HasColumnName("consulthospitalizereferlink")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Nextappointmentdata")
                        .HasColumnName("nextappointmentdata")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Otherdrugsprescribed")
                        .HasColumnName("otherdrugsprescribed")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Othertestdone")
                        .HasColumnName("othertestdone")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_otherdetails");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateOtherfluids", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Aspirate")
                        .HasColumnName("aspirate")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Bloodsugarrange")
                        .HasColumnName("bloodsugarrange")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Bo")
                        .HasColumnName("bo")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Dobutamine")
                        .HasColumnName("dobutamine")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Dopamine")
                        .HasColumnName("dopamine")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Gainandlossof")
                        .HasColumnName("gainandlossof")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Insulin")
                        .HasColumnName("insulin")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Midazolam")
                        .HasColumnName("midazolam")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Morphin")
                        .HasColumnName("morphin")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Totalcalories")
                        .HasColumnName("totalcalories")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Totalfluidsandfeeds")
                        .HasColumnName("totalfluidsandfeeds")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Urineoutput")
                        .HasColumnName("urineoutput")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Vomit")
                        .HasColumnName("vomit")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_otherfluids");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateOthermodification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Othermodification")
                        .HasColumnName("othermodification")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_othermodification");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateOutpatientappointmentmade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Outpatientappointmentmade")
                        .HasColumnName("outpatientappointmentmade")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_outpatientappointmentmade");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePainassessmentscale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Painassessmentscale")
                        .HasColumnName("painassessmentscale")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_painassessmentscale");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePainassestmentscale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Painscore")
                        .HasColumnName("painscore")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Submit")
                        .HasColumnName("submit")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_painassestmentscale");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePastobstericform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Alive")
                        .HasColumnName("alive")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Gravidity")
                        .HasColumnName("gravidity")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Miscarriage")
                        .HasColumnName("miscarriage")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Para")
                        .HasColumnName("para")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_pastobstericform");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePastobsterichistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Alive")
                        .HasColumnName("alive")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Gravidity")
                        .HasColumnName("gravidity")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Miscarriage")
                        .HasColumnName("miscarriage")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Para")
                        .HasColumnName("para")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_pastobsterichistory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePatientandcaregiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientandcaregiverhasanamedcontactandtelephonenumberintheeventofdifficultiesfollowingdischarge")
                        .HasColumnName("patientandcaregiverhasanamedcontactandtelephonenumberintheeventofdifficultiesfollowingdischarge")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_patientandcaregiver");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePatientdetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Babysbloodgroup")
                        .HasColumnName("babysbloodgroup")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Indicationforebt")
                        .HasColumnName("indicationforebt")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Mothersbloodgroup")
                        .HasColumnName("mothersbloodgroup")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_patientdetail");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePatientdetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Edd")
                        .HasColumnName("edd")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Familyplanningwritecode")
                        .HasColumnName("familyplanningwritecode")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Functionalstatus")
                        .HasColumnName("functionalstatus")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Otheroisproblem")
                        .HasColumnName("otheroisproblem")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Pregnancybreastfeedingstatus")
                        .HasColumnName("pregnancybreastfeedingstatus")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Tbstatus")
                        .HasColumnName("tbstatus")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Whoclinicalstage")
                        .HasColumnName("whoclinicalstage")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_patientdetails");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePatientinformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Submit")
                        .HasColumnName("submit")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_patientinformation");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePhysicalexamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Linesdatedlines")
                        .HasColumnName("linesdatedlines")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Longlines")
                        .HasColumnName("longlines")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Others")
                        .HasColumnName("others")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Textfield")
                        .HasColumnName("textfield")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Uac")
                        .HasColumnName("uac")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Uvc")
                        .HasColumnName("uvc")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_physicalexamination");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePhysicianincharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Physicianname")
                        .HasColumnName("physicianname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_physicianincharge");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Foodandideatoemphasize")
                        .HasColumnName("foodandideatoemphasize")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Foodstoavoid")
                        .HasColumnName("foodstoavoid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Foodstolimit")
                        .HasColumnName("foodstolimit")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Handoutanddietsheetgive1")
                        .HasColumnName("handoutanddietsheetgive1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Othernotes")
                        .HasColumnName("othernotes")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_plan");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePosttreatmentlabresult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Dialysisdoseacheieved")
                        .HasColumnName("dialysisdoseacheieved")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Nextrecommendeddialysistreatment")
                        .HasColumnName("nextrecommendeddialysistreatment")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_posttreatmentlabresult");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePresentingcomplaintsandhistoryofpresentillness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Presentingcomplaintsandhistoryofpresentillness")
                        .HasColumnName("presentingcomplaintsandhistoryofpresentillness")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Submit")
                        .HasColumnName("submit")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_presentingcomplaintsandhistoryofpresentillness");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePresentobsterichistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Columns")
                        .HasColumnName("columns")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Columns1")
                        .HasColumnName("columns1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Columns2")
                        .HasColumnName("columns2")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Columns3")
                        .HasColumnName("columns3")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Columns4")
                        .HasColumnName("columns4")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Datebleeding")
                        .HasColumnName("datebleeding")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Edd")
                        .HasColumnName("edd")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Ega")
                        .HasColumnName("ega")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Excessivevomiting")
                        .HasColumnName("excessivevomiting")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Febrilicillness")
                        .HasColumnName("febrilicillness")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Lmp")
                        .HasColumnName("lmp")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Otherrelevantsymptoms")
                        .HasColumnName("otherrelevantsymptoms")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Pelvicpain")
                        .HasColumnName("pelvicpain")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Radio1")
                        .HasColumnName("radio1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Radio2")
                        .HasColumnName("radio2")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Urinarysymptoms")
                        .HasColumnName("urinarysymptoms")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_presentobsterichistory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePrimaryexaminationdetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abdomen")
                        .HasColumnName("abdomen")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Breast")
                        .HasColumnName("breast")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Chest")
                        .HasColumnName("chest")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Cns")
                        .HasColumnName("cns")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Cvs")
                        .HasColumnName("cvs")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Generalcondition")
                        .HasColumnName("generalcondition")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Otherrelevantabnormalities")
                        .HasColumnName("otherrelevantabnormalities")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Pelvis")
                        .HasColumnName("pelvis")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_primaryexaminationdetail");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePrimaryexaminationdetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abdomen")
                        .HasColumnName("abdomen")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Breasts")
                        .HasColumnName("breasts")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Chest")
                        .HasColumnName("chest")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Cns")
                        .HasColumnName("cns")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Cvs")
                        .HasColumnName("cvs")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Generalcondition")
                        .HasColumnName("generalcondition")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Mss")
                        .HasColumnName("mss")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Otherrelevantabnormalities")
                        .HasColumnName("otherrelevantabnormalities")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Pelvis")
                        .HasColumnName("pelvis")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_primaryexaminationdetails");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplatePsychological", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Angry")
                        .HasColumnName("angry")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Anxious")
                        .HasColumnName("anxious")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Columns")
                        .HasColumnName("columns")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Columns1")
                        .HasColumnName("columns1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Homicidal")
                        .HasColumnName("homicidal")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Normal")
                        .HasColumnName("normal")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Other")
                        .HasColumnName("other")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Radio1")
                        .HasColumnName("radio1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Suicidal")
                        .HasColumnName("suicidal")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_psychological");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Ppr")
                        .HasColumnName("ppr")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Pqrst")
                        .HasColumnName("pqrst")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Qrs")
                        .HasColumnName("qrs")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Qtqtc")
                        .HasColumnName("qtqtc")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Result")
                        .HasColumnName("result")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Rv6sv2")
                        .HasColumnName("rv6sv2")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Rvssv1")
                        .HasColumnName("rvssv1")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Rvssv2")
                        .HasColumnName("rvssv2")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_result");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateResultinterpretation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Resultinterpretation")
                        .HasColumnName("resultinterpretation")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_resultinterpretation");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateResultsofpreviousinvestigationdone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Results")
                        .HasColumnName("results")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_resultsofpreviousinvestigationdone");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateSepsis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Sepsis")
                        .HasColumnName("sepsis")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_sepsis");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateSpecimenrequired", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Specimenrequired")
                        .HasColumnName("specimenrequired")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_specimenrequired");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateSurgeryform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("template_surgeryform");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateTeaching", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Columns")
                        .HasColumnName("columns")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Discusspainmanagementpainscaleandsideeffect")
                        .HasColumnName("discusspainmanagementpainscaleandsideeffect")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Explaintreatment")
                        .HasColumnName("explaintreatment")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Teachankleexercise")
                        .HasColumnName("teachankleexercise")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_teaching");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateTestspecimen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Eucrifindicatedclinically")
                        .HasColumnName("eucrifindicatedclinically")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Fbc")
                        .HasColumnName("fbc")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Ptnr12goalsinrifonwatarin")
                        .HasColumnName("ptnr12goalsinrifonwatarin")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_testspecimen");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateTone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Floppy")
                        .HasColumnName("floppy")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Hypertonia")
                        .HasColumnName("hypertonia")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Normal")
                        .HasColumnName("normal")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_tone");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateTransportarrange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Ambulance")
                        .HasColumnName("ambulance")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Private")
                        .HasColumnName("private")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_transportarrange");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateTreatmentgiven", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Posttreatmentconditionandrecommendation")
                        .HasColumnName("posttreatmentconditionandrecommendation")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Treatmenttype")
                        .HasColumnName("treatmenttype")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_treatmentgiven");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateTreatmentmanagementplan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Treatmentmanagementplan")
                        .HasColumnName("treatmentmanagementplan")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_treatmentmanagementplan");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateTypeofresuscitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<string>("Bagmask")
                        .HasColumnName("bagmask")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Drugs")
                        .HasColumnName("drugs")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Intubation")
                        .HasColumnName("intubation")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Suction")
                        .HasColumnName("suction")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Tactilestimulation")
                        .HasColumnName("tactilestimulation")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Umbilicalcatheterization")
                        .HasColumnName("umbilicalcatheterization")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_typeofresuscitation");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateUrinalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Submit")
                        .HasColumnName("submit")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Urinalysis")
                        .HasColumnName("urinalysis")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_urinalysis");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateVentilation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Fioz")
                        .HasColumnName("fioz")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Map")
                        .HasColumnName("map")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Mode")
                        .HasColumnName("mode")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Pipandpeep")
                        .HasColumnName("pipandpeep")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Ratedp")
                        .HasColumnName("ratedp")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Spoz")
                        .HasColumnName("spoz")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Ti")
                        .HasColumnName("ti")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_ventilation");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.TemplateVitals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Accountid")
                        .HasColumnName("accountid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Submit")
                        .HasColumnName("submit")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Vitals")
                        .HasColumnName("vitals")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("template_vitals");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Title", b =>
                {
                    b.Property<int>("Titleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("titleid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Titlename")
                        .HasColumnName("titlename")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Titleid");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Transportation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cost")
                        .HasColumnName("cost")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DiagnosisId")
                        .HasColumnName("diagnosisID")
                        .HasColumnType("int");

                    b.Property<bool?>("Isclaimsgenerated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isclaimsgenerated")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Preauth")
                        .HasColumnName("preauth")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.ToTable("transportation");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.User", b =>
                {
                    b.Property<int>("IdU")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_u")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Addressline1U")
                        .HasColumnName("addressline1_u")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Addressline2U")
                        .HasColumnName("addressline2_u")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Departmetid")
                        .HasColumnName("departmetid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DobU")
                        .HasColumnName("dob_u")
                        .HasColumnType("date");

                    b.Property<string>("EmailU")
                        .HasColumnName("email_u")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("FirstnameU")
                        .HasColumnName("firstname_u")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("GenderU")
                        .HasColumnName("gender_u")
                        .HasColumnType("char(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("LastnameU")
                        .HasColumnName("lastname_u")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("OthernameU")
                        .HasColumnName("othername_u")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("PasswordU")
                        .HasColumnName("password_u")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("PhoneU")
                        .HasColumnName("phone_u")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int?>("Providerid")
                        .HasColumnName("providerid")
                        .HasColumnType("int");

                    b.Property<string>("TitleU")
                        .HasColumnName("title_u")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsernameU")
                        .HasColumnName("username_u")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("IdU");

                    b.ToTable("user");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.UserLocation", b =>
                {
                    b.Property<int>("Userlocationid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("userlocationid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Locationid")
                        .HasColumnName("locationid")
                        .HasColumnType("int");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid")
                        .HasColumnType("int");

                    b.HasKey("Userlocationid");

                    b.HasIndex("Locationid");

                    b.HasIndex("Userid");

                    b.ToTable("User_Location");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.UserRole", b =>
                {
                    b.Property<int>("Userroleid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("userroleid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("dateadded")
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Permission")
                        .HasColumnName("permission")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("Roleid")
                        .HasColumnName("roleid")
                        .HasColumnType("int");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid")
                        .HasColumnType("int");

                    b.HasKey("Userroleid");

                    b.HasIndex("Roleid");

                    b.HasIndex("Userid");

                    b.ToTable("User_Role");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Utilization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bloodpressure")
                        .HasColumnName("bloodpressure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateDied")
                        .HasColumnName("dateDied")
                        .HasColumnType("datetime");

                    b.Property<int?>("DiagnosisId")
                        .HasColumnName("diagnosisID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Dischargeddate")
                        .HasColumnName("dischargeddate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("Encounterdate")
                        .HasColumnName("encounterdate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Enrolleeid")
                        .HasColumnName("enrolleeid")
                        .HasColumnType("int");

                    b.Property<string>("Height")
                        .HasColumnName("height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsNewBorn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isNewBorn")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsReferred")
                        .HasColumnName("isReferred")
                        .HasColumnType("bit");

                    b.Property<bool?>("Isinpatient")
                        .HasColumnName("isinpatient")
                        .HasColumnType("bit");

                    b.Property<bool?>("Issynced")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("issynced")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Isvisitscheduled")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isvisitscheduled")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Note")
                        .HasColumnName("note")
                        .HasColumnType("text");

                    b.Property<string>("Pulse")
                        .HasColumnName("pulse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferredFrom")
                        .HasColumnName("referredFrom")
                        .HasColumnType("int");

                    b.Property<int?>("ReferredTo")
                        .HasColumnName("referredTo")
                        .HasColumnType("int");

                    b.Property<string>("Respiration")
                        .HasColumnName("respiration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SyncAt")
                        .HasColumnName("sync_at")
                        .HasColumnType("datetime");

                    b.Property<string>("Temprature")
                        .HasColumnName("temprature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestingDoctor")
                        .HasColumnName("testingDoctor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid")
                        .HasColumnType("int");

                    b.Property<string>("VisiType")
                        .HasColumnName("visiType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VisitInfoEncounterDate")
                        .HasColumnName("visitInfoEncounterDate")
                        .HasColumnType("date");

                    b.Property<string>("Visitoutcome")
                        .HasColumnName("visitoutcome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .HasColumnName("weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Enrolleeid");

                    b.HasIndex("ReferredFrom");

                    b.HasIndex("ReferredTo");

                    b.HasIndex("Userid");

                    b.ToTable("utilization");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.VerificationLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Isseen")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("isseen")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("Issynced")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("issynced")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Mode")
                        .HasColumnName("mode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Patientid")
                        .HasColumnName("patientid")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ProviderId")
                        .HasColumnName("ProviderID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SyncAt")
                        .HasColumnName("sync_at")
                        .HasColumnType("datetime");

                    b.Property<int?>("Userid")
                        .HasColumnName("userid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Patientid");

                    b.HasIndex("ProviderId");

                    b.HasIndex("Userid");

                    b.ToTable("Verification_Log");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.VisitType", b =>
                {
                    b.Property<int>("Typeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("typeid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Typename")
                        .IsRequired()
                        .HasColumnName("typename")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("Typeid")
                        .HasName("PK__VisitTyp__F0528D02702008C8");

                    b.ToTable("VisitType");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Ward", b =>
                {
                    b.Property<int>("Wardid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("wardid")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Dateadded")
                        .HasColumnName("dateadded")
                        .HasColumnType("datetime");

                    b.Property<string>("Wardname")
                        .HasColumnName("wardname")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("Wardid");

                    b.ToTable("Ward");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AccesscontrolUser", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccessControl", "AccessControl")
                        .WithMany("AccesscontrolUser")
                        .HasForeignKey("AccessControlId")
                        .HasConstraintName("FK_accesscontrol_user_access_control")
                        .IsRequired();

                    b.HasOne("medicloud.emr.api.Entities.User", "User")
                        .WithMany("AccesscontrolUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_accesscontrol_user_user")
                        .IsRequired();
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AccountManager", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Country", "Country")
                        .WithMany("AccountManager")
                        .HasForeignKey("Countryid")
                        .HasConstraintName("FK_AccountManager_country");

                    b.HasOne("medicloud.emr.api.Entities.State", "State")
                        .WithMany("AccountManager")
                        .HasForeignKey("Stateid")
                        .HasConstraintName("FK_AccountManager_State");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Admission", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Bed", "Bed")
                        .WithMany("Admission")
                        .HasForeignKey("Bedid")
                        .HasConstraintName("FK_Admission_Bed");

                    b.HasOne("medicloud.emr.api.Entities.Department", "Dept")
                        .WithMany("Admission")
                        .HasForeignKey("Deptid")
                        .HasConstraintName("FK_Admission_Department");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "DischargedByNavigation")
                        .WithMany("AdmissionDischargedByNavigation")
                        .HasForeignKey("DischargedBy")
                        .HasConstraintName("FK_Admission_Personnel1");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("Admission")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Admission_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Admission")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_admission_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "Staff")
                        .WithMany("AdmissionStaff")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_Admission_Personnel");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AdmissionDiagnosis", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Admission", "Admission")
                        .WithMany("AdmissionDiagnosis")
                        .HasForeignKey("Admissionid")
                        .HasConstraintName("FK_Admission_Diagnosis_Admission");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AntenatalRecord", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Consultation", "Consultation")
                        .WithMany("AntenatalRecord")
                        .HasForeignKey("Consultationid")
                        .HasConstraintName("FK_Antenatal_Record_Patient")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AppUser", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.IdentificationMode", "IdentificationMode")
                        .WithMany("AppUser")
                        .HasForeignKey("IdentificationModeid");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("AppUser")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_appuser_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.Title", "Title")
                        .WithMany("AppUser")
                        .HasForeignKey("Titleid")
                        .HasConstraintName("Title_AppUser");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ApplicationUser", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Location", "Location")
                        .WithMany("ApplicationUser")
                        .HasForeignKey("Locationid")
                        .HasConstraintName("FK__Applicati__locat__5C0D8F7B");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Appointment", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Department", "Dept")
                        .WithMany("Appointment")
                        .HasForeignKey("Deptid")
                        .HasConstraintName("FK_Department_Appointment");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "Staff")
                        .WithMany("Appointment")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_Department_Staff");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AppointmentSchedule", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Location", "Location")
                        .WithMany("AppointmentSchedule")
                        .HasForeignKey("Locationid")
                        .HasConstraintName("FK__Appointme__locat__28E2F130");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "PatientNumberNavigation")
                        .WithMany("AppointmentSchedule")
                        .HasForeignKey("PatientNumber")
                        .HasConstraintName("FK__Appointme__patie__308412F8");

                    b.HasOne("medicloud.emr.api.Entities.ApplicationUser", "Prov")
                        .WithMany("AppointmentSchedule")
                        .HasForeignKey("Provid")
                        .HasConstraintName("FK__Appointme__provi__2ACB39A2");

                    b.HasOne("medicloud.emr.api.Entities.Referral", "Referral")
                        .WithMany("AppointmentSchedule")
                        .HasForeignKey("Referralid")
                        .HasConstraintName("FK__Appointme__refer__2BBF5DDB");

                    b.HasOne("medicloud.emr.api.Entities.ReferringPhysician", "Referring")
                        .WithMany("AppointmentSchedule")
                        .HasForeignKey("Referringid")
                        .HasConstraintName("FK__Appointme__refer__2CB38214");

                    b.HasOne("medicloud.emr.api.Entities.Reminder", "Reminder")
                        .WithMany("AppointmentSchedule")
                        .HasForeignKey("Reminderid")
                        .HasConstraintName("FK__Appointme__remin__2F8FEEBF");

                    b.HasOne("medicloud.emr.api.Entities.Specialization", "Spec")
                        .WithMany("AppointmentSchedule")
                        .HasForeignKey("Specid")
                        .HasConstraintName("FK__Appointme__speci__29D71569");

                    b.HasOne("medicloud.emr.api.Entities.AppointmentStatus", "Status")
                        .WithMany("AppointmentSchedule")
                        .HasForeignKey("Statusid")
                        .HasConstraintName("FK__Appointme__statu__2DA7A64D");

                    b.HasOne("medicloud.emr.api.Entities.VisitType", "Visittype")
                        .WithMany("AppointmentSchedule")
                        .HasForeignKey("Visittypeid")
                        .HasConstraintName("FK__Appointme__visit__2E9BCA86");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Asset", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Location", "Location")
                        .WithMany("Asset")
                        .HasForeignKey("Locationid")
                        .HasConstraintName("FK_Asset_Location");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Asset")
                        .HasForeignKey("Providerid")
                        .HasConstraintName("FK_Asset_Provider");

                    b.HasOne("medicloud.emr.api.Entities.Supplier", "Supplier")
                        .WithMany("Asset")
                        .HasForeignKey("Supplierid")
                        .HasConstraintName("FK_Asset_Supplier");

                    b.HasOne("medicloud.emr.api.Entities.AssetType", "Type")
                        .WithMany("Asset")
                        .HasForeignKey("Typeid")
                        .HasConstraintName("FK_Asset_AssetType");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AssetType", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("AssetType")
                        .HasForeignKey("Providerid")
                        .HasConstraintName("FK_AssetType_Provider");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AssignedAsset", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Personnel", "Approver")
                        .WithMany("AssignedAssetApprover")
                        .HasForeignKey("Approverid")
                        .HasConstraintName("FK_AssignedAsset_Personnel2");

                    b.HasOne("medicloud.emr.api.Entities.Asset", "Asset")
                        .WithMany("AssignedAsset")
                        .HasForeignKey("Assetid")
                        .HasConstraintName("FK_AssignedAsset_Asset");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("AssignedAsset")
                        .HasForeignKey("Providerid")
                        .HasConstraintName("FK_AssignedAsset_AccountManager");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "Staff")
                        .WithMany("AssignedAssetStaff")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_AssignedAsset_Personnel1");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.AuditLog", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("AuditLog")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_auditlog_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "User")
                        .WithMany("AuditLog")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_audit_log_user");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Authorisation", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Hmo", "Hmo")
                        .WithMany("Authorisation")
                        .HasForeignKey("Hmoid")
                        .HasConstraintName("fk_hmo");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Bed", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Bed")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_bed_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.Ward", "Ward")
                        .WithMany("Bed")
                        .HasForeignKey("Wardid")
                        .HasConstraintName("FK_Bed_Ward");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Bill", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountType", "Accounttype")
                        .WithMany("Bill")
                        .HasForeignKey("Accounttypeid")
                        .HasConstraintName("FK_Bill_AccountType");

                    b.HasOne("medicloud.emr.api.Entities.Consultation", "Consultation")
                        .WithMany("Bill")
                        .HasForeignKey("Consultationid")
                        .HasConstraintName("FK_Bill_Consultation");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("Bill")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Bill_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Bill")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_bill_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "Staff")
                        .WithMany("Bill")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_Bill_Personnel");

                    b.HasOne("medicloud.emr.api.Entities.Tariff", "Tariff")
                        .WithMany("Bill")
                        .HasForeignKey("Tariffid")
                        .HasConstraintName("FK_Bill_Tariff");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.BillDetail", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Department", "Dept")
                        .WithMany("BillDetail")
                        .HasForeignKey("Deptid")
                        .HasConstraintName("FK_Bill_Detail_Department");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("BillDetail")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_billdetail_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.BillPayable", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Bill", "Bill")
                        .WithMany("BillPayable")
                        .HasForeignKey("Billid")
                        .HasConstraintName("FK_BillPayable_Bill");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("BillPayable")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_BillPayable_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("BillPayable")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_billpayable_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "Staff")
                        .WithMany("BillPayable")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_BillPayable_Personnel");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Biometric", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("Biometric")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("Patient_Biometric");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Biometric")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_biometric_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.BirthRegister", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("BirthRegister")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_BirthRegister_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("BirthRegister")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_birthregister_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "Staff")
                        .WithMany("BirthRegister")
                        .HasForeignKey("Staffid")
                        .HasConstraintName("FK_BirthRegister_Personnel");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.BreakBlockSchedule", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Location", "Location")
                        .WithMany("BreakBlockSchedule")
                        .HasForeignKey("Locationid")
                        .HasConstraintName("FK__BreakBloc__locat__70D3A237");

                    b.HasOne("medicloud.emr.api.Entities.ApplicationUser", "Prov")
                        .WithMany("BreakBlockSchedule")
                        .HasForeignKey("Provid")
                        .HasConstraintName("FK__BreakBloc__provi__71C7C670");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.CaseNote", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("CaseNote")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_casenote_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.User", "User")
                        .WithMany("CaseNote")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_case_note_user");

                    b.HasOne("medicloud.emr.api.Entities.Utilization", "Utilization")
                        .WithMany("CaseNote")
                        .HasForeignKey("UtilizationId")
                        .HasConstraintName("FK_case_note_utilization");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.CentralStore", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("CentralStore")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_centralstore_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.CheckIn", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "AccountManager")
                        .WithMany("CheckIn")
                        .HasForeignKey("Accountid")
                        .HasConstraintName("FK_CheckIn_Patient_Account")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("medicloud.emr.api.Entities.Location", "Location")
                        .WithMany("CheckIn")
                        .HasForeignKey("Locationid")
                        .HasConstraintName("FK_CheckIn_Location")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("CheckIn")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_CheckIn_Patient");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Claims", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.DiagnosisUtilization", "Diagnosis")
                        .WithMany("Claims")
                        .HasForeignKey("DiagnosisId")
                        .HasConstraintName("FK_claims_diagnosis_utilization");

                    b.HasOne("medicloud.emr.api.Entities.Enrollee", "Enrollee")
                        .WithMany("Claims")
                        .HasForeignKey("Enrolleeid")
                        .HasConstraintName("FK_claims_enrollee");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Claims")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_claims_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_claims_user");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Consultation", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Consultation")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_consultation_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationCheck", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Consultation", "Consultation")
                        .WithMany("ConsultationCheck")
                        .HasForeignKey("Consultationid")
                        .HasConstraintName("FK_Consultation_Check_Consultation");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("ConsultationCheck")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Consultation_Check_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ConsultationCheck")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_consultationcheck_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationCheckslist", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.ConsultationChecks", "Ccltype")
                        .WithMany("ConsultationCheckslist")
                        .HasForeignKey("Ccltypeid")
                        .HasConstraintName("FK_ConsultationCheckslist_ConsultationCheckslist");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationComplaints", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Consultation", "Consultation")
                        .WithMany("ConsultationComplaints")
                        .HasForeignKey("Consultationid")
                        .HasConstraintName("FK_Consultation_Complaints_Consultation")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("ConsultationComplaints")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Consultation_Complaints_Patient")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ConsultationComplaints")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_Consultation_Complaints_AccountManager")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationDental", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Consultation", "Consultation")
                        .WithMany("ConsultationDental")
                        .HasForeignKey("Consultationid")
                        .HasConstraintName("FK_Consultation_Dental_Consultation");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("ConsultationDental")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Consultation_Dental_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ConsultationDental")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_Consultation_Dental_AccountManager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationDentalProcedure", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Consultation", "Consultation")
                        .WithMany("ConsultationDentalProcedure")
                        .HasForeignKey("Consultationid")
                        .HasConstraintName("FK_Consultation_DentalProcedure_Consultation");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("ConsultationDentalProcedure")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Consultation_DentalProcedure_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ConsultationDentalProcedure")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_Consultation_DentalProcedure_AccountManager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationDiagnosis", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Consultation", "Consultation")
                        .WithMany("ConsultationDiagnosis")
                        .HasForeignKey("Consultationid")
                        .HasConstraintName("FK_Consultation_Diagnosis_Consultation");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("ConsultationDiagnosis")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Consultation_Diagnosis_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ConsultationDiagnosis")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_consultationdiagnosis_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationLaboratory", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Department", "Dept")
                        .WithMany("ConsultationLaboratory")
                        .HasForeignKey("Deptid")
                        .HasConstraintName("FK_Consultation_Laboratory_Department");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("ConsultationLaboratory")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Consultation_Laboratory_Patient");

                    b.HasOne("medicloud.emr.api.Entities.PatientOrder", "Patientorder")
                        .WithMany("ConsultationLaboratory")
                        .HasForeignKey("Patientorderid")
                        .HasConstraintName("FK_Consultation_Laboratory_Patient_Order");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ConsultationLaboratory")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_consultationlab_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationOtherDiagnosis", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Consultation", "Consultation")
                        .WithMany("ConsultationOtherDiagnosis")
                        .HasForeignKey("Consultationid")
                        .HasConstraintName("FK_Consultation_OtherDiagnosis_Consultation")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("ConsultationOtherDiagnosis")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Consultation_OtherDiagnosis_Patient")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ConsultationOtherDiagnosis")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_Consultation_OtherDiagnosis_AccountManager")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationPrescription", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Consultation", "Consultation")
                        .WithMany("ConsultationPrescription")
                        .HasForeignKey("Consultationid")
                        .HasConstraintName("FK_Consultation_Prescription_Consultation");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("ConsultationPrescription")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Consultation_Prescription_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ConsultationPrescription")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_consultationprescription_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationProblem", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Consultation", "Consultation")
                        .WithMany("ConsultationProblem")
                        .HasForeignKey("Consultationid")
                        .HasConstraintName("FK_Consultation_Problem_Consultation");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("ConsultationProblem")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Consultation_Problem_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ConsultationProblem")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_Consultation_Problem_AccountManager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationProcedure", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Consultation", "Consultation")
                        .WithMany("ConsultationProcedure")
                        .HasForeignKey("Consultationid")
                        .HasConstraintName("FK_Consultation_Procedure_Consultation");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("ConsultationProcedure")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Consultation_Procedure_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ConsultationProcedure")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_consultationprocedure_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationRadiology", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ConsultationRadiology")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_consultationrad_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ConsultationUtilization", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.DiagnosisUtilization", "Diagnosis")
                        .WithMany("ConsultationUtilization")
                        .HasForeignKey("DiagnosisId")
                        .HasConstraintName("FK_consultation_utilization_diagnosis_utilization")
                        .IsRequired();

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ConsultationUtilization")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_consultationutilization_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Cptprocedure", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Cptcategory", "Cptcategory")
                        .WithMany("Cptprocedure")
                        .HasForeignKey("Cptcategoryid")
                        .HasConstraintName("FK_CPTProcedure_CPTCategory");

                    b.HasOne("medicloud.emr.api.Entities.CptsubCategory", "Cptsubcategory")
                        .WithMany("Cptprocedure")
                        .HasForeignKey("Cptsubcategoryid")
                        .HasConstraintName("FK_CPTProcedure_CPTSubCategory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.CptsubCategory", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Cptcategory", "Cptcategory")
                        .WithMany("CptsubCategory")
                        .HasForeignKey("Cptcategoryid")
                        .HasConstraintName("FK_CPTSubCategory_CPTCategory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DataSynchronization", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.User", "User")
                        .WithMany("DataSynchronization")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_data_synchronization_user");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Department", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Department")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_dept_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DependantInfo", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Enrollee", "Enrollee")
                        .WithMany("DependantInfo")
                        .HasForeignKey("Enrolleeid")
                        .HasConstraintName("FK_dependant_info_enrollee");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Diagnosis", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Diagnosis")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_diagnosis_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DiagnosisUtilization", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Diagnosis", "Diagnosis")
                        .WithMany("DiagnosisUtilization")
                        .HasForeignKey("DiagnosisId")
                        .HasConstraintName("FK_diagnosis_utilization_diagnosis")
                        .IsRequired();

                    b.HasOne("medicloud.emr.api.Entities.Utilization", "Utilization")
                        .WithMany("DiagnosisUtilization")
                        .HasForeignKey("UtilizationId")
                        .HasConstraintName("FK_diagnosis_utilization_utilization")
                        .IsRequired();
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DispensingStore", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Drug", "Drug")
                        .WithMany("DispensingStore")
                        .HasForeignKey("Drugid")
                        .HasConstraintName("FK_DispensingStore_Drug");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("DispensingStore")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_dispensing_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Division", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Group", "Group")
                        .WithMany("Division")
                        .HasForeignKey("Groupid")
                        .HasConstraintName("FK_division_group");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Drug", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.DrugCategory", "Drugcategory")
                        .WithMany("Drug")
                        .HasForeignKey("Drugcategoryid")
                        .HasConstraintName("FK_Drug_DrugCategory");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Drug")
                        .HasForeignKey("Providerid")
                        .HasConstraintName("FK_Drug_Provider");

                    b.HasOne("medicloud.emr.api.Entities.Supplier", "Supplier")
                        .WithMany("Drug")
                        .HasForeignKey("Supplierid")
                        .HasConstraintName("FK_Drug_Supplier");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DrugDispense", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.User", "User")
                        .WithMany("DrugDispense")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_drug_dispense_user");

                    b.HasOne("medicloud.emr.api.Entities.Utilization", "Utilization")
                        .WithMany("DrugDispense")
                        .HasForeignKey("UtilizationId")
                        .HasConstraintName("FK_drug_dispense_utilization");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DrugOrders", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Personnel", "AdminHandlerNavigation")
                        .WithMany("DrugOrdersAdminHandlerNavigation")
                        .HasForeignKey("AdminHandler")
                        .HasConstraintName("FK_DrugOrders_Personnel2");

                    b.HasOne("medicloud.emr.api.Entities.Drug", "Drug")
                        .WithMany("DrugOrders")
                        .HasForeignKey("DrugId")
                        .HasConstraintName("FK_DrugOrders_Drug");

                    b.HasOne("medicloud.emr.api.Entities.Supplier", "OrderSupplier")
                        .WithMany("DrugOrders")
                        .HasForeignKey("OrderSupplierId")
                        .HasConstraintName("FK_DrugOrders_Supplier");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "PharmacyHandlerNavigation")
                        .WithMany("DrugOrdersPharmacyHandlerNavigation")
                        .HasForeignKey("PharmacyHandler")
                        .HasConstraintName("FK_DrugOrders_Personnel");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.DrugUtilization", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.DiagnosisUtilization", "Diagnosis")
                        .WithMany("DrugUtilization")
                        .HasForeignKey("DiagnosisId")
                        .HasConstraintName("FK_drug_utilization_diagnosis_utilization")
                        .IsRequired();
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Enrollee", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Division", "Division")
                        .WithMany("Enrollee")
                        .HasForeignKey("Divisionid")
                        .HasConstraintName("FK_enrollee_division");

                    b.HasOne("medicloud.emr.api.Entities.EnrolleeType", "Enrolleetype")
                        .WithMany("Enrollee")
                        .HasForeignKey("Enrolleetypeid")
                        .HasConstraintName("FK_enrollee_enrollee_type");

                    b.HasOne("medicloud.emr.api.Entities.Group", "Group")
                        .WithMany("Enrollee")
                        .HasForeignKey("Groupid")
                        .HasConstraintName("FK_enrollee_group");

                    b.HasOne("medicloud.emr.api.Entities.Network", "Network")
                        .WithMany("Enrollee")
                        .HasForeignKey("Networkid")
                        .HasConstraintName("FK_enrollee_network");

                    b.HasOne("medicloud.emr.api.Entities.Plan", "Plain")
                        .WithMany("Enrollee")
                        .HasForeignKey("Plainid")
                        .HasConstraintName("FK_enrollee_plan");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Enrollee")
                        .HasForeignKey("Providerid")
                        .HasConstraintName("FK_enrollee_provider");

                    b.HasOne("medicloud.emr.api.Entities.User", "User")
                        .WithMany("Enrollee")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_enrollee_user");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.EnrolleeType", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("EnrolleeType")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_enrolleetype_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Fingerprint", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("Fingerprint")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_fingerprint_enrollee");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Fingerprint")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_fingerprint_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.GeneralSchedule", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Location", "Location")
                        .WithMany("GeneralSchedule")
                        .HasForeignKey("Locationid")
                        .HasConstraintName("FK__GeneralSc__locat__1451E89E");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Hmo", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.State", "State")
                        .WithMany("Hmo")
                        .HasForeignKey("Stateid")
                        .HasConstraintName("State_HMO");

                    b.HasOne("medicloud.emr.api.Entities.HmoType", "Type")
                        .WithMany("Hmo")
                        .HasForeignKey("Typeid")
                        .HasConstraintName("FK_HMO_HmoType");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.HmoMonthlyList", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Hmo", "Hmo")
                        .WithMany("HmoMonthlyList")
                        .HasForeignKey("Hmoid")
                        .HasConstraintName("FK_hmoMonthlyList_HMO");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.HmoType", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("HmoType")
                        .HasForeignKey("Providerid")
                        .HasConstraintName("FK_HmoType_Provider");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Icd10diagnosis", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Icdcategory", "Icdcategory")
                        .WithMany("Icd10diagnosis")
                        .HasForeignKey("Icdcategoryid")
                        .HasConstraintName("FK_ICD10Diagnosis_ICDCategory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Insurance", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Hmo", "Hmo")
                        .WithMany("Insurance")
                        .HasForeignKey("Hmoid")
                        .HasConstraintName("HMO_Insurance");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("Insurance")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("Patient_Insurance");

                    b.HasOne("medicloud.emr.api.Entities.State", "State")
                        .WithMany("Insurance")
                        .HasForeignKey("Stateid")
                        .HasConstraintName("State_Insurance");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.LicenseManager", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("LicenseManager")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_license_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Login", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Login")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_login_accountmanager")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.MedicalProblemItem", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.MedicalProblemCategory", "Med")
                        .WithMany("MedicalProblemItem")
                        .HasForeignKey("Medid")
                        .HasConstraintName("FK_MedicalProblemItem_MedicalProblemCategory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Messaging", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Messaging")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_messaging_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "Reciever")
                        .WithMany("MessagingReciever")
                        .HasForeignKey("RecieverId")
                        .HasConstraintName("FK_Messaging_Personnel1");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "Sender")
                        .WithMany("MessagingSender")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK_Messaging_Personnel");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.OrderCategory", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.OrderType", "Ordertype")
                        .WithMany("OrderCategory")
                        .HasForeignKey("Ordertypeid")
                        .HasConstraintName("fk_ordercategory_ordertype");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.OrderListing", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.OrderCategory", "Ordercategory")
                        .WithMany("OrderListing")
                        .HasForeignKey("Ordercategoryid")
                        .HasConstraintName("fk_ordercat_orderlisting");

                    b.HasOne("medicloud.emr.api.Entities.OrderType", "OrdertypeNavigation")
                        .WithMany("OrderListing")
                        .HasForeignKey("Ordertypeid")
                        .HasConstraintName("fk_ordertype_orderlisting");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Patient", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.BloodGroup", "Bloodgroup")
                        .WithMany("Patient")
                        .HasForeignKey("Bloodgroupid")
                        .HasConstraintName("FK_BloodGroup_Patient");

                    b.HasOne("medicloud.emr.api.Entities.EnrolleeType", "Cardtype")
                        .WithMany("Patient")
                        .HasForeignKey("Cardtypeid")
                        .HasConstraintName("FK_Patient_enrollee_type");

                    b.HasOne("medicloud.emr.api.Entities.HealthCareFacilitator", "Facilitator")
                        .WithMany("Patient")
                        .HasForeignKey("Facilitatorid")
                        .HasConstraintName("FK_HealthCareFacilitator_Patient");

                    b.HasOne("medicloud.emr.api.Entities.Gender", "Gender")
                        .WithMany("Patient")
                        .HasForeignKey("Genderid")
                        .HasConstraintName("Gender_Patient");

                    b.HasOne("medicloud.emr.api.Entities.GenoType", "GenotypeNavigation")
                        .WithMany("Patient")
                        .HasForeignKey("Genotypeid")
                        .HasConstraintName("FK_Genotype_Patient");

                    b.HasOne("medicloud.emr.api.Entities.LeadSource", "Lead")
                        .WithMany("Patient")
                        .HasForeignKey("Leadid")
                        .HasConstraintName("FK_Leadsource_Patient");

                    b.HasOne("medicloud.emr.api.Entities.Maritalstatus", "Maritalstatus")
                        .WithMany("Patient")
                        .HasForeignKey("Maritalstatusid")
                        .HasConstraintName("FK_Marital_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Patient")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_patient_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.Referral", "Ref")
                        .WithMany("Patient")
                        .HasForeignKey("Refid")
                        .HasConstraintName("FK_Referral_Patient");

                    b.HasOne("medicloud.emr.api.Entities.Sponsor", "Spons")
                        .WithMany("Patient")
                        .HasForeignKey("Sponsid")
                        .HasConstraintName("FK_Sponsor_Patient");

                    b.HasOne("medicloud.emr.api.Entities.State", "State")
                        .WithMany("Patient")
                        .HasForeignKey("Stateid")
                        .HasConstraintName("State_Patient");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.PatientMedicalHistory", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("PatientMedicalHistory")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Patient_MedicalHistory_Patient");

                    b.HasOne("medicloud.emr.api.Entities.MedicalProblemItem", "Problem")
                        .WithMany("PatientMedicalHistory")
                        .HasForeignKey("Problemid")
                        .HasConstraintName("FK_Patient_MedicalHistory_MedicalProblemItem");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("PatientMedicalHistory")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_patientmh_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.PatientOrder", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Personnel", "CompletedbyNavigation")
                        .WithMany("PatientOrderCompletedbyNavigation")
                        .HasForeignKey("Completedby")
                        .HasConstraintName("fk_patient_order_personnel");

                    b.HasOne("medicloud.emr.api.Entities.OrderCategory", "Ordercategory")
                        .WithMany("PatientOrder")
                        .HasForeignKey("Ordercategoryid")
                        .HasConstraintName("fk_ordercat_patient_order");

                    b.HasOne("medicloud.emr.api.Entities.OrderListing", "Orderlist")
                        .WithMany("PatientOrder")
                        .HasForeignKey("Orderlistid")
                        .HasConstraintName("fk_orderlisting_patient_order");

                    b.HasOne("medicloud.emr.api.Entities.OrderStatus", "Orderstatus")
                        .WithMany("PatientOrder")
                        .HasForeignKey("Orderstatusid")
                        .HasConstraintName("fk_orderstatus_patient_order");

                    b.HasOne("medicloud.emr.api.Entities.OrderType", "Ordertype")
                        .WithMany("PatientOrder")
                        .HasForeignKey("Ordertypeid")
                        .HasConstraintName("fk_ordertype_patient_order");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("PatientOrder")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("fk_patient_patient_order");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("PatientOrder")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_patientorder_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "RaisedbyNavigation")
                        .WithMany("PatientOrderRaisedbyNavigation")
                        .HasForeignKey("Raisedby")
                        .HasConstraintName("fk_patient_doctor_personnel");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.PatientOrderDetails", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.PatientOrder", "Patientorder")
                        .WithMany("PatientOrderDetails")
                        .HasForeignKey("Patientorderid")
                        .HasConstraintName("FK_Patient_Order_Details_Patient_Order");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.PatientQuestionnaire", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("PatientQuestionnaire")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Patient_Questionnaire_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("PatientQuestionnaire")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_patientques_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.QuestionCategory", "Qcat")
                        .WithMany("PatientQuestionnaire")
                        .HasForeignKey("Qcatid")
                        .HasConstraintName("FK_Patient_Questionnaire_QuestionCategory");

                    b.HasOne("medicloud.emr.api.Entities.Questionnaire", "Q")
                        .WithMany("PatientQuestionnaire")
                        .HasForeignKey("Qid")
                        .HasConstraintName("FK_Patient_Questionnaire_Questionnaire");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Personnel", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Department", "Dept")
                        .WithMany("Personnel")
                        .HasForeignKey("Deptid")
                        .HasConstraintName("FK_Personnel_Department");

                    b.HasOne("medicloud.emr.api.Entities.Designation", "Designation")
                        .WithMany("Personnel")
                        .HasForeignKey("Designationid")
                        .HasConstraintName("FK_Personnel_Designation");

                    b.HasOne("medicloud.emr.api.Entities.IdentificationMode", "IdentificationMode")
                        .WithMany("Personnel")
                        .HasForeignKey("IdentificationModeid");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Personnel")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_personnel_accountmanager")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("medicloud.emr.api.Entities.Title", "Title")
                        .WithMany("Personnel")
                        .HasForeignKey("Titleid")
                        .HasConstraintName("FK_Personnel_Title");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Photo", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("Photo")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_photo_enrollee");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Procedure", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Procedure")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_procedure_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ProcedureUtilization", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.DiagnosisUtilization", "Diagnosis")
                        .WithMany("ProcedureUtilization")
                        .HasForeignKey("DiagnosisId")
                        .HasConstraintName("FK_procedure_utilization_diagnosis_utilization")
                        .IsRequired();

                    b.HasOne("medicloud.emr.api.Entities.Procedure", "Procedure")
                        .WithMany("ProcedureUtilization")
                        .HasForeignKey("ProcedureId")
                        .HasConstraintName("FK_procedure_utilization_procedure");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ProviderChange", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Enrollee", "Enrollee")
                        .WithMany("ProviderChange")
                        .HasForeignKey("EnrolleeId")
                        .HasConstraintName("FK_provider_change_enrollee");

                    b.HasOne("medicloud.emr.api.Entities.User", "User")
                        .WithMany("ProviderChange")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_provider_change_user");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ProviderNetwork", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Provider", "Provider")
                        .WithMany("ProviderNetwork")
                        .HasForeignKey("Providerid")
                        .HasConstraintName("FK_provider_network_provider")
                        .IsRequired();
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ProviderSchedule", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Location", "Location")
                        .WithMany("ProviderSchedule")
                        .HasForeignKey("Locationid")
                        .HasConstraintName("FK__ProviderS__locat__24885067");

                    b.HasOne("medicloud.emr.api.Entities.ApplicationUser", "Prov")
                        .WithMany("ProviderSchedule")
                        .HasForeignKey("Provid")
                        .HasConstraintName("FK__ProviderS__provi__267098D9");

                    b.HasOne("medicloud.emr.api.Entities.Specialization", "Spec")
                        .WithMany("ProviderSchedule")
                        .HasForeignKey("Specid")
                        .HasConstraintName("FK__ProviderS__speci__257C74A0");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Questionnaire", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.QuestionCategory", "Questioncategory")
                        .WithMany("Questionnaire")
                        .HasForeignKey("Questioncategoryid")
                        .HasConstraintName("FK_Questionnaire_QuestionCategory");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.QueueManager", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.BenefitPackage", "Benpackage")
                        .WithMany("QueueManager")
                        .HasForeignKey("Benpackageid")
                        .HasConstraintName("FK_QueueManager_BenefitPackage");

                    b.HasOne("medicloud.emr.api.Entities.Department", "Dept")
                        .WithMany("QueueManager")
                        .HasForeignKey("Deptid")
                        .HasConstraintName("FK_QueueManager_Department");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "FromPersonnel")
                        .WithMany("QueueManagerFromPersonnel")
                        .HasForeignKey("FromPersonnelid")
                        .HasConstraintName("FK_QueueManager_Personnel");

                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("QueueManager")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_QueueManager_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("QueueManager")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_queuemgr_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "RemovedByNavigation")
                        .WithMany("QueueManagerRemovedByNavigation")
                        .HasForeignKey("RemovedBy")
                        .HasConstraintName("FK_QueueManager_Personnel1");

                    b.HasOne("medicloud.emr.api.Entities.Personnel", "ToPersonnel")
                        .WithMany("QueueManagerToPersonnel")
                        .HasForeignKey("ToPersonnelid")
                        .HasConstraintName("FK_QueueManager_Personnel2");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ReceivingStore", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ReceivingStore")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_recvstore_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ReferenceMaterial", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("ReferenceMaterial")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_Reference_Material_Patient");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ReferenceMaterial")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("FK_Reference_Material_AccountManager")
                        .IsRequired();
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Renewal", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Enrollee", "Enrollee")
                        .WithMany("Renewal")
                        .HasForeignKey("Enrolleeid")
                        .HasConstraintName("FK_renewal_enrollee");

                    b.HasOne("medicloud.emr.api.Entities.User", "User")
                        .WithMany("Renewal")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_renewal_user");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Role", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Role")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_role_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Service", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Department", "Dept")
                        .WithMany("Service")
                        .HasForeignKey("Deptid")
                        .HasConstraintName("FK_Service_Department");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Service")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_service_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.ServiceType", "Servicetype")
                        .WithMany("Service")
                        .HasForeignKey("Servicetypeid")
                        .HasConstraintName("FK_Service_ServiceType");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.ServiceTariff", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("ServiceTariff")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_servicetariff_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.Service", "Service")
                        .WithMany("ServiceTariff")
                        .HasForeignKey("Serviceid")
                        .HasConstraintName("FK_Service_Tariff_Service");

                    b.HasOne("medicloud.emr.api.Entities.Tariff", "Tariff")
                        .WithMany("ServiceTariff")
                        .HasForeignKey("Tariffid")
                        .HasConstraintName("FK_Service_Tariff_Tariff");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Specialization", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Location", "Location")
                        .WithMany("Specialization")
                        .HasForeignKey("Locationid")
                        .HasConstraintName("FK__Specializ__locat__172E5549");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.SpecializationSchedule", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Location", "Location")
                        .WithMany("SpecializationSchedule")
                        .HasForeignKey("Locationid")
                        .HasConstraintName("FK__Specializ__locat__1A0AC1F4");

                    b.HasOne("medicloud.emr.api.Entities.Specialization", "Spec")
                        .WithMany("SpecializationSchedule")
                        .HasForeignKey("Specid")
                        .HasConstraintName("FK__Specializ__speci__1AFEE62D");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.State", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Country", "Country")
                        .WithMany("State")
                        .HasForeignKey("Countryid")
                        .HasConstraintName("FK_State_country");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Supplier", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Supplier")
                        .HasForeignKey("Providerid")
                        .HasConstraintName("FK_Supplier_provider");

                    b.HasOne("medicloud.emr.api.Entities.SupplierType", "Suppliertype")
                        .WithMany("Supplier")
                        .HasForeignKey("Suppliertypeid")
                        .HasConstraintName("fk_supplier_type");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Tariff", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("Tariff")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_tariff_accountmanager");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Transportation", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.DiagnosisUtilization", "Diagnosis")
                        .WithMany("Transportation")
                        .HasForeignKey("DiagnosisId")
                        .HasConstraintName("FK_transportation_diagnosis_utilization");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.UserLocation", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Location", "Location")
                        .WithMany("UserLocation")
                        .HasForeignKey("Locationid")
                        .HasConstraintName("Location_User_Location");

                    b.HasOne("medicloud.emr.api.Entities.AppUser", "User")
                        .WithMany("UserLocation")
                        .HasForeignKey("Userid")
                        .HasConstraintName("AppUser_User_Location");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.UserRole", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Role", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("Roleid")
                        .HasConstraintName("Role_User_Role");

                    b.HasOne("medicloud.emr.api.Entities.AppUser", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("Userid")
                        .HasConstraintName("AppUser_User_Role");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.Utilization", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Enrollee", "Enrollee")
                        .WithMany("Utilization")
                        .HasForeignKey("Enrolleeid")
                        .HasConstraintName("FK_utilization_enrollee");

                    b.HasOne("medicloud.emr.api.Entities.Provider", "ReferredFromNavigation")
                        .WithMany("UtilizationReferredFromNavigation")
                        .HasForeignKey("ReferredFrom")
                        .HasConstraintName("FK_utilization_provider");

                    b.HasOne("medicloud.emr.api.Entities.Provider", "ReferredToNavigation")
                        .WithMany("UtilizationReferredToNavigation")
                        .HasForeignKey("ReferredTo")
                        .HasConstraintName("FK_utilization_provider1");

                    b.HasOne("medicloud.emr.api.Entities.User", "User")
                        .WithMany("Utilization")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_utilization_user");
                });

            modelBuilder.Entity("medicloud.emr.api.Entities.VerificationLog", b =>
                {
                    b.HasOne("medicloud.emr.api.Entities.Patient", "Patient")
                        .WithMany("VerificationLog")
                        .HasForeignKey("Patientid")
                        .HasConstraintName("FK_verification_log_enrollee");

                    b.HasOne("medicloud.emr.api.Entities.AccountManager", "Provider")
                        .WithMany("VerificationLog")
                        .HasForeignKey("ProviderId")
                        .HasConstraintName("fk_verificationlog_accountmanager");

                    b.HasOne("medicloud.emr.api.Entities.User", "User")
                        .WithMany("VerificationLog")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_verification_log_user");
                });
#pragma warning restore 612, 618
        }
    }
}
